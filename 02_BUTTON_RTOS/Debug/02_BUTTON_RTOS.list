
02_BUTTON_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ff8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08005198  08005198  00015198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052b8  080052b8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080052b8  080052b8  000152b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052c0  080052c0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052c0  080052c0  000152c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052c4  080052c4  000152c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080052c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004adc  20000078  08005340  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b54  08005340  00024b54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001af23  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003335  00000000  00000000  0003afcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c0  00000000  00000000  0003e300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a8  00000000  00000000  0003f6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172ad  00000000  00000000  00040968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000154a9  00000000  00000000  00057c15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000979b5  00000000  00000000  0006d0be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00104a73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005620  00000000  00000000  00104ac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005180 	.word	0x08005180

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08005180 	.word	0x08005180

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <button_check>:
};



void button_check(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	static int ledon = 0;
	// check one click
	if (get_button(GPIOC, GPIO_PIN_13, BUTTON0) == BUTTON_PRESS)
 80004dc:	2200      	movs	r2, #0
 80004de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004e2:	481e      	ldr	r0, [pc, #120]	; (800055c <button_check+0x84>)
 80004e4:	f000 f842 	bl	800056c <get_button>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d134      	bne.n	8000558 <button_check+0x80>
	{
		ledon %= 16;
 80004ee:	4b1c      	ldr	r3, [pc, #112]	; (8000560 <button_check+0x88>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	425a      	negs	r2, r3
 80004f4:	f003 030f 	and.w	r3, r3, #15
 80004f8:	f002 020f 	and.w	r2, r2, #15
 80004fc:	bf58      	it	pl
 80004fe:	4253      	negpl	r3, r2
 8000500:	4a17      	ldr	r2, [pc, #92]	; (8000560 <button_check+0x88>)
 8000502:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOB, 0x01 << ledon, 1);
 8000504:	4b16      	ldr	r3, [pc, #88]	; (8000560 <button_check+0x88>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	2201      	movs	r2, #1
 800050a:	fa02 f303 	lsl.w	r3, r2, r3
 800050e:	b29b      	uxth	r3, r3
 8000510:	2201      	movs	r2, #1
 8000512:	4619      	mov	r1, r3
 8000514:	4813      	ldr	r0, [pc, #76]	; (8000564 <button_check+0x8c>)
 8000516:	f000 fe05 	bl	8001124 <HAL_GPIO_WritePin>
		ledon++;
 800051a:	4b11      	ldr	r3, [pc, #68]	; (8000560 <button_check+0x88>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	3301      	adds	r3, #1
 8000520:	4a0f      	ldr	r2, [pc, #60]	; (8000560 <button_check+0x88>)
 8000522:	6013      	str	r3, [r2, #0]

		if (ledon > 8)
 8000524:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <button_check+0x88>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2b08      	cmp	r3, #8
 800052a:	dd15      	ble.n	8000558 <button_check+0x80>
		{
			HAL_GPIO_WritePin(GPIOB, 0x80 >> (ledon+6)%15, 0);
 800052c:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <button_check+0x88>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	1d9a      	adds	r2, r3, #6
 8000532:	4b0d      	ldr	r3, [pc, #52]	; (8000568 <button_check+0x90>)
 8000534:	fb83 1302 	smull	r1, r3, r3, r2
 8000538:	4413      	add	r3, r2
 800053a:	10d9      	asrs	r1, r3, #3
 800053c:	17d3      	asrs	r3, r2, #31
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	460b      	mov	r3, r1
 8000542:	011b      	lsls	r3, r3, #4
 8000544:	1a5b      	subs	r3, r3, r1
 8000546:	1ad1      	subs	r1, r2, r3
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	410b      	asrs	r3, r1
 800054c:	b29b      	uxth	r3, r3
 800054e:	2200      	movs	r2, #0
 8000550:	4619      	mov	r1, r3
 8000552:	4804      	ldr	r0, [pc, #16]	; (8000564 <button_check+0x8c>)
 8000554:	f000 fde6 	bl	8001124 <HAL_GPIO_WritePin>
		}

	}
}
 8000558:	bf00      	nop
 800055a:	bd80      	pop	{r7, pc}
 800055c:	40020800 	.word	0x40020800
 8000560:	20000094 	.word	0x20000094
 8000564:	40020400 	.word	0x40020400
 8000568:	88888889 	.word	0x88888889

0800056c <get_button>:
// if one click status, return 1
int get_button(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, int button_num) // ex) GPIOC, GPIO_PIN_13, 0
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	460b      	mov	r3, r1
 8000576:	607a      	str	r2, [r7, #4]
 8000578:	817b      	strh	r3, [r7, #10]
	int state;

	state = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin); // active : 0, inactive : 1
 800057a:	897b      	ldrh	r3, [r7, #10]
 800057c:	4619      	mov	r1, r3
 800057e:	68f8      	ldr	r0, [r7, #12]
 8000580:	f000 fdb8 	bl	80010f4 <HAL_GPIO_ReadPin>
 8000584:	4603      	mov	r3, r0
 8000586:	617b      	str	r3, [r7, #20]
	if (state == BUTTON_PRESS && button_status[button_num] == BUTTON_RELEASE)
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d10f      	bne.n	80005ae <get_button+0x42>
 800058e:	4a14      	ldr	r2, [pc, #80]	; (80005e0 <get_button+0x74>)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4413      	add	r3, r2
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b01      	cmp	r3, #1
 8000598:	d109      	bne.n	80005ae <get_button+0x42>
	{
		HAL_Delay(60); // For noise remove delay
 800059a:	203c      	movs	r0, #60	; 0x3c
 800059c:	f000 fb20 	bl	8000be0 <HAL_Delay>
		button_status[button_num] = BUTTON_PRESS; // Not first button press
 80005a0:	4a0f      	ldr	r2, [pc, #60]	; (80005e0 <get_button+0x74>)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4413      	add	r3, r2
 80005a6:	2200      	movs	r2, #0
 80005a8:	701a      	strb	r2, [r3, #0]
		return BUTTON_RELEASE;
 80005aa:	2301      	movs	r3, #1
 80005ac:	e013      	b.n	80005d6 <get_button+0x6a>
	}
	else if (button_status[button_num] == BUTTON_PRESS && state == BUTTON_RELEASE) // Previous, button is pressed but Now, inactive status
 80005ae:	4a0c      	ldr	r2, [pc, #48]	; (80005e0 <get_button+0x74>)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	4413      	add	r3, r2
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d10c      	bne.n	80005d4 <get_button+0x68>
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d109      	bne.n	80005d4 <get_button+0x68>
	{
		button_status[button_num] = BUTTON_RELEASE;
 80005c0:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <get_button+0x74>)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4413      	add	r3, r2
 80005c6:	2201      	movs	r2, #1
 80005c8:	701a      	strb	r2, [r3, #0]
		HAL_Delay(60);
 80005ca:	203c      	movs	r0, #60	; 0x3c
 80005cc:	f000 fb08 	bl	8000be0 <HAL_Delay>
		return BUTTON_PRESS;
 80005d0:	2300      	movs	r3, #0
 80005d2:	e000      	b.n	80005d6 <get_button+0x6a>
	}
	return BUTTON_RELEASE;
 80005d4:	2301      	movs	r3, #1
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3718      	adds	r7, #24
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000000 	.word	0x20000000

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e8:	f000 fab8 	bl	8000b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ec:	f000 f83c 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f0:	f000 f8ce 	bl	8000790 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005f4:	f000 f8a2 	bl	800073c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //led_main();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005f8:	f001 ff48 	bl	800248c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005fc:	4a10      	ldr	r2, [pc, #64]	; (8000640 <main+0x5c>)
 80005fe:	2100      	movs	r1, #0
 8000600:	4810      	ldr	r0, [pc, #64]	; (8000644 <main+0x60>)
 8000602:	f001 ff8d 	bl	8002520 <osThreadNew>
 8000606:	4603      	mov	r3, r0
 8000608:	4a0f      	ldr	r2, [pc, #60]	; (8000648 <main+0x64>)
 800060a:	6013      	str	r3, [r2, #0]

  /* creation of myTask01 */
  myTask01Handle = osThreadNew(StartTask01, NULL, &myTask01_attributes);
 800060c:	4a0f      	ldr	r2, [pc, #60]	; (800064c <main+0x68>)
 800060e:	2100      	movs	r1, #0
 8000610:	480f      	ldr	r0, [pc, #60]	; (8000650 <main+0x6c>)
 8000612:	f001 ff85 	bl	8002520 <osThreadNew>
 8000616:	4603      	mov	r3, r0
 8000618:	4a0e      	ldr	r2, [pc, #56]	; (8000654 <main+0x70>)
 800061a:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 800061c:	4a0e      	ldr	r2, [pc, #56]	; (8000658 <main+0x74>)
 800061e:	2100      	movs	r1, #0
 8000620:	480e      	ldr	r0, [pc, #56]	; (800065c <main+0x78>)
 8000622:	f001 ff7d 	bl	8002520 <osThreadNew>
 8000626:	4603      	mov	r3, r0
 8000628:	4a0d      	ldr	r2, [pc, #52]	; (8000660 <main+0x7c>)
 800062a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800062c:	f001 ff52 	bl	80024d4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); //Ctrl + Space
 8000630:	2120      	movs	r1, #32
 8000632:	480c      	ldr	r0, [pc, #48]	; (8000664 <main+0x80>)
 8000634:	f000 fd8f 	bl	8001156 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000638:	2064      	movs	r0, #100	; 0x64
 800063a:	f000 fad1 	bl	8000be0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); //Ctrl + Space
 800063e:	e7f7      	b.n	8000630 <main+0x4c>
 8000640:	080051d4 	.word	0x080051d4
 8000644:	08000899 	.word	0x08000899
 8000648:	20004a6c 	.word	0x20004a6c
 800064c:	080051f8 	.word	0x080051f8
 8000650:	080008ad 	.word	0x080008ad
 8000654:	20004a74 	.word	0x20004a74
 8000658:	0800521c 	.word	0x0800521c
 800065c:	080008c1 	.word	0x080008c1
 8000660:	20004a70 	.word	0x20004a70
 8000664:	40020000 	.word	0x40020000

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b094      	sub	sp, #80	; 0x50
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0320 	add.w	r3, r7, #32
 8000672:	2230      	movs	r2, #48	; 0x30
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f004 fcb4 	bl	8004fe4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	4b28      	ldr	r3, [pc, #160]	; (8000734 <SystemClock_Config+0xcc>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	4a27      	ldr	r2, [pc, #156]	; (8000734 <SystemClock_Config+0xcc>)
 8000696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069a:	6413      	str	r3, [r2, #64]	; 0x40
 800069c:	4b25      	ldr	r3, [pc, #148]	; (8000734 <SystemClock_Config+0xcc>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a8:	2300      	movs	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	4b22      	ldr	r3, [pc, #136]	; (8000738 <SystemClock_Config+0xd0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a21      	ldr	r2, [pc, #132]	; (8000738 <SystemClock_Config+0xd0>)
 80006b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006b6:	6013      	str	r3, [r2, #0]
 80006b8:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <SystemClock_Config+0xd0>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c4:	2302      	movs	r3, #2
 80006c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c8:	2301      	movs	r3, #1
 80006ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006cc:	2310      	movs	r3, #16
 80006ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d0:	2302      	movs	r3, #2
 80006d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d4:	2300      	movs	r3, #0
 80006d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006d8:	2310      	movs	r3, #16
 80006da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006e2:	2304      	movs	r3, #4
 80006e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006e6:	2304      	movs	r3, #4
 80006e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ea:	f107 0320 	add.w	r3, r7, #32
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 fd4c 	bl	800118c <HAL_RCC_OscConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006fa:	f000 f901 	bl	8000900 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fe:	230f      	movs	r3, #15
 8000700:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000702:	2302      	movs	r3, #2
 8000704:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800070a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	2102      	movs	r1, #2
 800071a:	4618      	mov	r0, r3
 800071c:	f000 ffae 	bl	800167c <HAL_RCC_ClockConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000726:	f000 f8eb 	bl	8000900 <Error_Handler>
  }
}
 800072a:	bf00      	nop
 800072c:	3750      	adds	r7, #80	; 0x50
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40023800 	.word	0x40023800
 8000738:	40007000 	.word	0x40007000

0800073c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000742:	4a12      	ldr	r2, [pc, #72]	; (800078c <MX_USART2_UART_Init+0x50>)
 8000744:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000748:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800074c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000774:	f001 fc30 	bl	8001fd8 <HAL_UART_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800077e:	f000 f8bf 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20004a78 	.word	0x20004a78
 800078c:	40004400 	.word	0x40004400

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	; 0x28
 8000794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	4b37      	ldr	r3, [pc, #220]	; (8000888 <MX_GPIO_Init+0xf8>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a36      	ldr	r2, [pc, #216]	; (8000888 <MX_GPIO_Init+0xf8>)
 80007b0:	f043 0304 	orr.w	r3, r3, #4
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b34      	ldr	r3, [pc, #208]	; (8000888 <MX_GPIO_Init+0xf8>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0304 	and.w	r3, r3, #4
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	4b30      	ldr	r3, [pc, #192]	; (8000888 <MX_GPIO_Init+0xf8>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a2f      	ldr	r2, [pc, #188]	; (8000888 <MX_GPIO_Init+0xf8>)
 80007cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b2d      	ldr	r3, [pc, #180]	; (8000888 <MX_GPIO_Init+0xf8>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	4b29      	ldr	r3, [pc, #164]	; (8000888 <MX_GPIO_Init+0xf8>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a28      	ldr	r2, [pc, #160]	; (8000888 <MX_GPIO_Init+0xf8>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b26      	ldr	r3, [pc, #152]	; (8000888 <MX_GPIO_Init+0xf8>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b22      	ldr	r3, [pc, #136]	; (8000888 <MX_GPIO_Init+0xf8>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a21      	ldr	r2, [pc, #132]	; (8000888 <MX_GPIO_Init+0xf8>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b1f      	ldr	r3, [pc, #124]	; (8000888 <MX_GPIO_Init+0xf8>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2120      	movs	r1, #32
 800081a:	481c      	ldr	r0, [pc, #112]	; (800088c <MX_GPIO_Init+0xfc>)
 800081c:	f000 fc82 	bl	8001124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8000820:	2200      	movs	r2, #0
 8000822:	21ff      	movs	r1, #255	; 0xff
 8000824:	481a      	ldr	r0, [pc, #104]	; (8000890 <MX_GPIO_Init+0x100>)
 8000826:	f000 fc7d 	bl	8001124 <HAL_GPIO_WritePin>
                          |LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800082a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800082e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000830:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	4619      	mov	r1, r3
 8000840:	4814      	ldr	r0, [pc, #80]	; (8000894 <MX_GPIO_Init+0x104>)
 8000842:	f000 fad3 	bl	8000dec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000846:	2320      	movs	r3, #32
 8000848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084a:	2301      	movs	r3, #1
 800084c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	4619      	mov	r1, r3
 800085c:	480b      	ldr	r0, [pc, #44]	; (800088c <MX_GPIO_Init+0xfc>)
 800085e:	f000 fac5 	bl	8000dec <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin
                           LED4_Pin LED5_Pin LED6_Pin LED7_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8000862:	23ff      	movs	r3, #255	; 0xff
 8000864:	617b      	str	r3, [r7, #20]
                          |LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	2301      	movs	r3, #1
 8000868:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	4619      	mov	r1, r3
 8000878:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_GPIO_Init+0x100>)
 800087a:	f000 fab7 	bl	8000dec <HAL_GPIO_Init>

}
 800087e:	bf00      	nop
 8000880:	3728      	adds	r7, #40	; 0x28
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800
 800088c:	40020000 	.word	0x40020000
 8000890:	40020400 	.word	0x40020400
 8000894:	40020800 	.word	0x40020800

08000898 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  button_check();
 80008a0:	f7ff fe1a 	bl	80004d8 <button_check>
    osDelay(1);
 80008a4:	2001      	movs	r0, #1
 80008a6:	f001 fecd 	bl	8002644 <osDelay>
	  button_check();
 80008aa:	e7f9      	b.n	80008a0 <StartDefaultTask+0x8>

080008ac <StartTask01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask01 */
  /* Infinite loop */
  for(;;)
  {
	//ledbar0_toggle();
    osDelay(500);
 80008b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008b8:	f001 fec4 	bl	8002644 <osDelay>
 80008bc:	e7fa      	b.n	80008b4 <StartTask01+0x8>
	...

080008c0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); //Ctrl + Space
 80008c8:	2120      	movs	r1, #32
 80008ca:	4803      	ldr	r0, [pc, #12]	; (80008d8 <StartTask02+0x18>)
 80008cc:	f000 fc43 	bl	8001156 <HAL_GPIO_TogglePin>
    osDelay(200);
 80008d0:	20c8      	movs	r0, #200	; 0xc8
 80008d2:	f001 feb7 	bl	8002644 <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); //Ctrl + Space
 80008d6:	e7f7      	b.n	80008c8 <StartTask02+0x8>
 80008d8:	40020000 	.word	0x40020000

080008dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a04      	ldr	r2, [pc, #16]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d101      	bne.n	80008f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ee:	f000 f957 	bl	8000ba0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40014800 	.word	0x40014800

08000900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000904:	b672      	cpsid	i
}
 8000906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000908:	e7fe      	b.n	8000908 <Error_Handler+0x8>
	...

0800090c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b12      	ldr	r3, [pc, #72]	; (8000960 <HAL_MspInit+0x54>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091a:	4a11      	ldr	r2, [pc, #68]	; (8000960 <HAL_MspInit+0x54>)
 800091c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000920:	6453      	str	r3, [r2, #68]	; 0x44
 8000922:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <HAL_MspInit+0x54>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <HAL_MspInit+0x54>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	4a0a      	ldr	r2, [pc, #40]	; (8000960 <HAL_MspInit+0x54>)
 8000938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800093c:	6413      	str	r3, [r2, #64]	; 0x40
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <HAL_MspInit+0x54>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800094a:	2200      	movs	r2, #0
 800094c:	210f      	movs	r1, #15
 800094e:	f06f 0001 	mvn.w	r0, #1
 8000952:	f000 fa21 	bl	8000d98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800

08000964 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08a      	sub	sp, #40	; 0x28
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a19      	ldr	r2, [pc, #100]	; (80009e8 <HAL_UART_MspInit+0x84>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d12b      	bne.n	80009de <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	4b18      	ldr	r3, [pc, #96]	; (80009ec <HAL_UART_MspInit+0x88>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	4a17      	ldr	r2, [pc, #92]	; (80009ec <HAL_UART_MspInit+0x88>)
 8000990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000994:	6413      	str	r3, [r2, #64]	; 0x40
 8000996:	4b15      	ldr	r3, [pc, #84]	; (80009ec <HAL_UART_MspInit+0x88>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <HAL_UART_MspInit+0x88>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a10      	ldr	r2, [pc, #64]	; (80009ec <HAL_UART_MspInit+0x88>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <HAL_UART_MspInit+0x88>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009be:	230c      	movs	r3, #12
 80009c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	2302      	movs	r3, #2
 80009c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ca:	2303      	movs	r3, #3
 80009cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009ce:	2307      	movs	r3, #7
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d2:	f107 0314 	add.w	r3, r7, #20
 80009d6:	4619      	mov	r1, r3
 80009d8:	4805      	ldr	r0, [pc, #20]	; (80009f0 <HAL_UART_MspInit+0x8c>)
 80009da:	f000 fa07 	bl	8000dec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009de:	bf00      	nop
 80009e0:	3728      	adds	r7, #40	; 0x28
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40004400 	.word	0x40004400
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40020000 	.word	0x40020000

080009f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08c      	sub	sp, #48	; 0x30
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 8000a04:	2200      	movs	r2, #0
 8000a06:	6879      	ldr	r1, [r7, #4]
 8000a08:	201a      	movs	r0, #26
 8000a0a:	f000 f9c5 	bl	8000d98 <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000a0e:	201a      	movs	r0, #26
 8000a10:	f000 f9de 	bl	8000dd0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	4b1e      	ldr	r3, [pc, #120]	; (8000a94 <HAL_InitTick+0xa0>)
 8000a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1c:	4a1d      	ldr	r2, [pc, #116]	; (8000a94 <HAL_InitTick+0xa0>)
 8000a1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a22:	6453      	str	r3, [r2, #68]	; 0x44
 8000a24:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <HAL_InitTick+0xa0>)
 8000a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a30:	f107 0210 	add.w	r2, r7, #16
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	4611      	mov	r1, r2
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f001 f81a 	bl	8001a74 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a40:	f001 f804 	bl	8001a4c <HAL_RCC_GetPCLK2Freq>
 8000a44:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a48:	4a13      	ldr	r2, [pc, #76]	; (8000a98 <HAL_InitTick+0xa4>)
 8000a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a4e:	0c9b      	lsrs	r3, r3, #18
 8000a50:	3b01      	subs	r3, #1
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <HAL_InitTick+0xa8>)
 8000a56:	4a12      	ldr	r2, [pc, #72]	; (8000aa0 <HAL_InitTick+0xac>)
 8000a58:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000a5a:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <HAL_InitTick+0xa8>)
 8000a5c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a60:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000a62:	4a0e      	ldr	r2, [pc, #56]	; (8000a9c <HAL_InitTick+0xa8>)
 8000a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a66:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <HAL_InitTick+0xa8>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <HAL_InitTick+0xa8>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8000a74:	4809      	ldr	r0, [pc, #36]	; (8000a9c <HAL_InitTick+0xa8>)
 8000a76:	f001 f82f 	bl	8001ad8 <HAL_TIM_Base_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d104      	bne.n	8000a8a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8000a80:	4806      	ldr	r0, [pc, #24]	; (8000a9c <HAL_InitTick+0xa8>)
 8000a82:	f001 f883 	bl	8001b8c <HAL_TIM_Base_Start_IT>
 8000a86:	4603      	mov	r3, r0
 8000a88:	e000      	b.n	8000a8c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3730      	adds	r7, #48	; 0x30
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40023800 	.word	0x40023800
 8000a98:	431bde83 	.word	0x431bde83
 8000a9c:	20004abc 	.word	0x20004abc
 8000aa0:	40014800 	.word	0x40014800

08000aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <NMI_Handler+0x4>

08000aaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aae:	e7fe      	b.n	8000aae <HardFault_Handler+0x4>

08000ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <MemManage_Handler+0x4>

08000ab6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aba:	e7fe      	b.n	8000aba <BusFault_Handler+0x4>

08000abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <UsageFault_Handler+0x4>

08000ac2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000ad4:	4802      	ldr	r0, [pc, #8]	; (8000ae0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000ad6:	f001 f8bb 	bl	8001c50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20004abc 	.word	0x20004abc

08000ae4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <SystemInit+0x20>)
 8000aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aee:	4a05      	ldr	r2, [pc, #20]	; (8000b04 <SystemInit+0x20>)
 8000af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b0c:	480d      	ldr	r0, [pc, #52]	; (8000b44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b0e:	490e      	ldr	r1, [pc, #56]	; (8000b48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b10:	4a0e      	ldr	r2, [pc, #56]	; (8000b4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b14:	e002      	b.n	8000b1c <LoopCopyDataInit>

08000b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1a:	3304      	adds	r3, #4

08000b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b20:	d3f9      	bcc.n	8000b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b22:	4a0b      	ldr	r2, [pc, #44]	; (8000b50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b24:	4c0b      	ldr	r4, [pc, #44]	; (8000b54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b28:	e001      	b.n	8000b2e <LoopFillZerobss>

08000b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b2c:	3204      	adds	r2, #4

08000b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b30:	d3fb      	bcc.n	8000b2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b32:	f7ff ffd7 	bl	8000ae4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b36:	f004 fa21 	bl	8004f7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b3a:	f7ff fd53 	bl	80005e4 <main>
  bx  lr    
 8000b3e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b48:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000b4c:	080052c8 	.word	0x080052c8
  ldr r2, =_sbss
 8000b50:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000b54:	20004b54 	.word	0x20004b54

08000b58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b58:	e7fe      	b.n	8000b58 <ADC_IRQHandler>
	...

08000b5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b60:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <HAL_Init+0x40>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a0d      	ldr	r2, [pc, #52]	; (8000b9c <HAL_Init+0x40>)
 8000b66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <HAL_Init+0x40>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <HAL_Init+0x40>)
 8000b72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <HAL_Init+0x40>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a07      	ldr	r2, [pc, #28]	; (8000b9c <HAL_Init+0x40>)
 8000b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b84:	2003      	movs	r0, #3
 8000b86:	f000 f8fc 	bl	8000d82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b8a:	200f      	movs	r0, #15
 8000b8c:	f7ff ff32 	bl	80009f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b90:	f7ff febc 	bl	800090c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40023c00 	.word	0x40023c00

08000ba0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_IncTick+0x20>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_IncTick+0x24>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4413      	add	r3, r2
 8000bb0:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <HAL_IncTick+0x24>)
 8000bb2:	6013      	str	r3, [r2, #0]
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	2000000c 	.word	0x2000000c
 8000bc4:	20004b04 	.word	0x20004b04

08000bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return uwTick;
 8000bcc:	4b03      	ldr	r3, [pc, #12]	; (8000bdc <HAL_GetTick+0x14>)
 8000bce:	681b      	ldr	r3, [r3, #0]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	20004b04 	.word	0x20004b04

08000be0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000be8:	f7ff ffee 	bl	8000bc8 <HAL_GetTick>
 8000bec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bf8:	d005      	beq.n	8000c06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <HAL_Delay+0x44>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	4413      	add	r3, r2
 8000c04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c06:	bf00      	nop
 8000c08:	f7ff ffde 	bl	8000bc8 <HAL_GetTick>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	68fa      	ldr	r2, [r7, #12]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d8f7      	bhi.n	8000c08 <HAL_Delay+0x28>
  {
  }
}
 8000c18:	bf00      	nop
 8000c1a:	bf00      	nop
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	2000000c 	.word	0x2000000c

08000c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c44:	4013      	ands	r3, r2
 8000c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c5a:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	60d3      	str	r3, [r2, #12]
}
 8000c60:	bf00      	nop
 8000c62:	3714      	adds	r7, #20
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <__NVIC_GetPriorityGrouping+0x18>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	0a1b      	lsrs	r3, r3, #8
 8000c7a:	f003 0307 	and.w	r3, r3, #7
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	db0b      	blt.n	8000cb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	f003 021f 	and.w	r2, r3, #31
 8000ca4:	4907      	ldr	r1, [pc, #28]	; (8000cc4 <__NVIC_EnableIRQ+0x38>)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	095b      	lsrs	r3, r3, #5
 8000cac:	2001      	movs	r0, #1
 8000cae:	fa00 f202 	lsl.w	r2, r0, r2
 8000cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000e100 	.word	0xe000e100

08000cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	db0a      	blt.n	8000cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	490c      	ldr	r1, [pc, #48]	; (8000d14 <__NVIC_SetPriority+0x4c>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	0112      	lsls	r2, r2, #4
 8000ce8:	b2d2      	uxtb	r2, r2
 8000cea:	440b      	add	r3, r1
 8000cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf0:	e00a      	b.n	8000d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4908      	ldr	r1, [pc, #32]	; (8000d18 <__NVIC_SetPriority+0x50>)
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	f003 030f 	and.w	r3, r3, #15
 8000cfe:	3b04      	subs	r3, #4
 8000d00:	0112      	lsls	r2, r2, #4
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	440b      	add	r3, r1
 8000d06:	761a      	strb	r2, [r3, #24]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000e100 	.word	0xe000e100
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b089      	sub	sp, #36	; 0x24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f1c3 0307 	rsb	r3, r3, #7
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	bf28      	it	cs
 8000d3a:	2304      	movcs	r3, #4
 8000d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3304      	adds	r3, #4
 8000d42:	2b06      	cmp	r3, #6
 8000d44:	d902      	bls.n	8000d4c <NVIC_EncodePriority+0x30>
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3b03      	subs	r3, #3
 8000d4a:	e000      	b.n	8000d4e <NVIC_EncodePriority+0x32>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	f04f 32ff 	mov.w	r2, #4294967295
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	401a      	ands	r2, r3
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d64:	f04f 31ff 	mov.w	r1, #4294967295
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6e:	43d9      	mvns	r1, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	4313      	orrs	r3, r2
         );
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3724      	adds	r7, #36	; 0x24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff ff4c 	bl	8000c28 <__NVIC_SetPriorityGrouping>
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
 8000da4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000daa:	f7ff ff61 	bl	8000c70 <__NVIC_GetPriorityGrouping>
 8000dae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	68b9      	ldr	r1, [r7, #8]
 8000db4:	6978      	ldr	r0, [r7, #20]
 8000db6:	f7ff ffb1 	bl	8000d1c <NVIC_EncodePriority>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc0:	4611      	mov	r1, r2
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff ff80 	bl	8000cc8 <__NVIC_SetPriority>
}
 8000dc8:	bf00      	nop
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff ff54 	bl	8000c8c <__NVIC_EnableIRQ>
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b089      	sub	sp, #36	; 0x24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
 8000e06:	e159      	b.n	80010bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e08:	2201      	movs	r2, #1
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	697a      	ldr	r2, [r7, #20]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	f040 8148 	bne.w	80010b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f003 0303 	and.w	r3, r3, #3
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d005      	beq.n	8000e3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d130      	bne.n	8000ea0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	2203      	movs	r2, #3
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4013      	ands	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	68da      	ldr	r2, [r3, #12]
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e74:	2201      	movs	r2, #1
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	091b      	lsrs	r3, r3, #4
 8000e8a:	f003 0201 	and.w	r2, r3, #1
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 0303 	and.w	r3, r3, #3
 8000ea8:	2b03      	cmp	r3, #3
 8000eaa:	d017      	beq.n	8000edc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	689a      	ldr	r2, [r3, #8]
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 0303 	and.w	r3, r3, #3
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d123      	bne.n	8000f30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	08da      	lsrs	r2, r3, #3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3208      	adds	r2, #8
 8000ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	f003 0307 	and.w	r3, r3, #7
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	220f      	movs	r2, #15
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	691a      	ldr	r2, [r3, #16]
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	08da      	lsrs	r2, r3, #3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3208      	adds	r2, #8
 8000f2a:	69b9      	ldr	r1, [r7, #24]
 8000f2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 0203 	and.w	r2, r3, #3
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	f000 80a2 	beq.w	80010b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	4b57      	ldr	r3, [pc, #348]	; (80010d4 <HAL_GPIO_Init+0x2e8>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	4a56      	ldr	r2, [pc, #344]	; (80010d4 <HAL_GPIO_Init+0x2e8>)
 8000f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f80:	6453      	str	r3, [r2, #68]	; 0x44
 8000f82:	4b54      	ldr	r3, [pc, #336]	; (80010d4 <HAL_GPIO_Init+0x2e8>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f8e:	4a52      	ldr	r2, [pc, #328]	; (80010d8 <HAL_GPIO_Init+0x2ec>)
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	089b      	lsrs	r3, r3, #2
 8000f94:	3302      	adds	r3, #2
 8000f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	220f      	movs	r2, #15
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a49      	ldr	r2, [pc, #292]	; (80010dc <HAL_GPIO_Init+0x2f0>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d019      	beq.n	8000fee <HAL_GPIO_Init+0x202>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a48      	ldr	r2, [pc, #288]	; (80010e0 <HAL_GPIO_Init+0x2f4>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d013      	beq.n	8000fea <HAL_GPIO_Init+0x1fe>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a47      	ldr	r2, [pc, #284]	; (80010e4 <HAL_GPIO_Init+0x2f8>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d00d      	beq.n	8000fe6 <HAL_GPIO_Init+0x1fa>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a46      	ldr	r2, [pc, #280]	; (80010e8 <HAL_GPIO_Init+0x2fc>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d007      	beq.n	8000fe2 <HAL_GPIO_Init+0x1f6>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a45      	ldr	r2, [pc, #276]	; (80010ec <HAL_GPIO_Init+0x300>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d101      	bne.n	8000fde <HAL_GPIO_Init+0x1f2>
 8000fda:	2304      	movs	r3, #4
 8000fdc:	e008      	b.n	8000ff0 <HAL_GPIO_Init+0x204>
 8000fde:	2307      	movs	r3, #7
 8000fe0:	e006      	b.n	8000ff0 <HAL_GPIO_Init+0x204>
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e004      	b.n	8000ff0 <HAL_GPIO_Init+0x204>
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	e002      	b.n	8000ff0 <HAL_GPIO_Init+0x204>
 8000fea:	2301      	movs	r3, #1
 8000fec:	e000      	b.n	8000ff0 <HAL_GPIO_Init+0x204>
 8000fee:	2300      	movs	r3, #0
 8000ff0:	69fa      	ldr	r2, [r7, #28]
 8000ff2:	f002 0203 	and.w	r2, r2, #3
 8000ff6:	0092      	lsls	r2, r2, #2
 8000ff8:	4093      	lsls	r3, r2
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001000:	4935      	ldr	r1, [pc, #212]	; (80010d8 <HAL_GPIO_Init+0x2ec>)
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	089b      	lsrs	r3, r3, #2
 8001006:	3302      	adds	r3, #2
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800100e:	4b38      	ldr	r3, [pc, #224]	; (80010f0 <HAL_GPIO_Init+0x304>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	43db      	mvns	r3, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4013      	ands	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001032:	4a2f      	ldr	r2, [pc, #188]	; (80010f0 <HAL_GPIO_Init+0x304>)
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001038:	4b2d      	ldr	r3, [pc, #180]	; (80010f0 <HAL_GPIO_Init+0x304>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d003      	beq.n	800105c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800105c:	4a24      	ldr	r2, [pc, #144]	; (80010f0 <HAL_GPIO_Init+0x304>)
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001062:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <HAL_GPIO_Init+0x304>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	43db      	mvns	r3, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4013      	ands	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001086:	4a1a      	ldr	r2, [pc, #104]	; (80010f0 <HAL_GPIO_Init+0x304>)
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800108c:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <HAL_GPIO_Init+0x304>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d003      	beq.n	80010b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010b0:	4a0f      	ldr	r2, [pc, #60]	; (80010f0 <HAL_GPIO_Init+0x304>)
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3301      	adds	r3, #1
 80010ba:	61fb      	str	r3, [r7, #28]
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	2b0f      	cmp	r3, #15
 80010c0:	f67f aea2 	bls.w	8000e08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	3724      	adds	r7, #36	; 0x24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40013800 	.word	0x40013800
 80010dc:	40020000 	.word	0x40020000
 80010e0:	40020400 	.word	0x40020400
 80010e4:	40020800 	.word	0x40020800
 80010e8:	40020c00 	.word	0x40020c00
 80010ec:	40021000 	.word	0x40021000
 80010f0:	40013c00 	.word	0x40013c00

080010f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	460b      	mov	r3, r1
 80010fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	691a      	ldr	r2, [r3, #16]
 8001104:	887b      	ldrh	r3, [r7, #2]
 8001106:	4013      	ands	r3, r2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d002      	beq.n	8001112 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800110c:	2301      	movs	r3, #1
 800110e:	73fb      	strb	r3, [r7, #15]
 8001110:	e001      	b.n	8001116 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001112:	2300      	movs	r3, #0
 8001114:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001116:	7bfb      	ldrb	r3, [r7, #15]
}
 8001118:	4618      	mov	r0, r3
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	460b      	mov	r3, r1
 800112e:	807b      	strh	r3, [r7, #2]
 8001130:	4613      	mov	r3, r2
 8001132:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001134:	787b      	ldrb	r3, [r7, #1]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d003      	beq.n	8001142 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800113a:	887a      	ldrh	r2, [r7, #2]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001140:	e003      	b.n	800114a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001142:	887b      	ldrh	r3, [r7, #2]
 8001144:	041a      	lsls	r2, r3, #16
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	619a      	str	r2, [r3, #24]
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001156:	b480      	push	{r7}
 8001158:	b085      	sub	sp, #20
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
 800115e:	460b      	mov	r3, r1
 8001160:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001168:	887a      	ldrh	r2, [r7, #2]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	4013      	ands	r3, r2
 800116e:	041a      	lsls	r2, r3, #16
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	43d9      	mvns	r1, r3
 8001174:	887b      	ldrh	r3, [r7, #2]
 8001176:	400b      	ands	r3, r1
 8001178:	431a      	orrs	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	619a      	str	r2, [r3, #24]
}
 800117e:	bf00      	nop
 8001180:	3714      	adds	r7, #20
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
	...

0800118c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d101      	bne.n	800119e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e264      	b.n	8001668 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d075      	beq.n	8001296 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011aa:	4ba3      	ldr	r3, [pc, #652]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f003 030c 	and.w	r3, r3, #12
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	d00c      	beq.n	80011d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011b6:	4ba0      	ldr	r3, [pc, #640]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011be:	2b08      	cmp	r3, #8
 80011c0:	d112      	bne.n	80011e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011c2:	4b9d      	ldr	r3, [pc, #628]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011ce:	d10b      	bne.n	80011e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d0:	4b99      	ldr	r3, [pc, #612]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d05b      	beq.n	8001294 <HAL_RCC_OscConfig+0x108>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d157      	bne.n	8001294 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e23f      	b.n	8001668 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011f0:	d106      	bne.n	8001200 <HAL_RCC_OscConfig+0x74>
 80011f2:	4b91      	ldr	r3, [pc, #580]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a90      	ldr	r2, [pc, #576]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 80011f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	e01d      	b.n	800123c <HAL_RCC_OscConfig+0xb0>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001208:	d10c      	bne.n	8001224 <HAL_RCC_OscConfig+0x98>
 800120a:	4b8b      	ldr	r3, [pc, #556]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a8a      	ldr	r2, [pc, #552]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 8001210:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	4b88      	ldr	r3, [pc, #544]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a87      	ldr	r2, [pc, #540]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 800121c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001220:	6013      	str	r3, [r2, #0]
 8001222:	e00b      	b.n	800123c <HAL_RCC_OscConfig+0xb0>
 8001224:	4b84      	ldr	r3, [pc, #528]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a83      	ldr	r2, [pc, #524]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 800122a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800122e:	6013      	str	r3, [r2, #0]
 8001230:	4b81      	ldr	r3, [pc, #516]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a80      	ldr	r2, [pc, #512]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 8001236:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800123a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d013      	beq.n	800126c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001244:	f7ff fcc0 	bl	8000bc8 <HAL_GetTick>
 8001248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800124a:	e008      	b.n	800125e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800124c:	f7ff fcbc 	bl	8000bc8 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b64      	cmp	r3, #100	; 0x64
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e204      	b.n	8001668 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125e:	4b76      	ldr	r3, [pc, #472]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d0f0      	beq.n	800124c <HAL_RCC_OscConfig+0xc0>
 800126a:	e014      	b.n	8001296 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126c:	f7ff fcac 	bl	8000bc8 <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001272:	e008      	b.n	8001286 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001274:	f7ff fca8 	bl	8000bc8 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b64      	cmp	r3, #100	; 0x64
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e1f0      	b.n	8001668 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001286:	4b6c      	ldr	r3, [pc, #432]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1f0      	bne.n	8001274 <HAL_RCC_OscConfig+0xe8>
 8001292:	e000      	b.n	8001296 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001294:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d063      	beq.n	800136a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012a2:	4b65      	ldr	r3, [pc, #404]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f003 030c 	and.w	r3, r3, #12
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d00b      	beq.n	80012c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ae:	4b62      	ldr	r3, [pc, #392]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012b6:	2b08      	cmp	r3, #8
 80012b8:	d11c      	bne.n	80012f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ba:	4b5f      	ldr	r3, [pc, #380]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d116      	bne.n	80012f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012c6:	4b5c      	ldr	r3, [pc, #368]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d005      	beq.n	80012de <HAL_RCC_OscConfig+0x152>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d001      	beq.n	80012de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e1c4      	b.n	8001668 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012de:	4b56      	ldr	r3, [pc, #344]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	4952      	ldr	r1, [pc, #328]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 80012ee:	4313      	orrs	r3, r2
 80012f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012f2:	e03a      	b.n	800136a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d020      	beq.n	800133e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012fc:	4b4f      	ldr	r3, [pc, #316]	; (800143c <HAL_RCC_OscConfig+0x2b0>)
 80012fe:	2201      	movs	r2, #1
 8001300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001302:	f7ff fc61 	bl	8000bc8 <HAL_GetTick>
 8001306:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001308:	e008      	b.n	800131c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800130a:	f7ff fc5d 	bl	8000bc8 <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e1a5      	b.n	8001668 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800131c:	4b46      	ldr	r3, [pc, #280]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d0f0      	beq.n	800130a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001328:	4b43      	ldr	r3, [pc, #268]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	691b      	ldr	r3, [r3, #16]
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	4940      	ldr	r1, [pc, #256]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 8001338:	4313      	orrs	r3, r2
 800133a:	600b      	str	r3, [r1, #0]
 800133c:	e015      	b.n	800136a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800133e:	4b3f      	ldr	r3, [pc, #252]	; (800143c <HAL_RCC_OscConfig+0x2b0>)
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001344:	f7ff fc40 	bl	8000bc8 <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800134c:	f7ff fc3c 	bl	8000bc8 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e184      	b.n	8001668 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800135e:	4b36      	ldr	r3, [pc, #216]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1f0      	bne.n	800134c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0308 	and.w	r3, r3, #8
 8001372:	2b00      	cmp	r3, #0
 8001374:	d030      	beq.n	80013d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d016      	beq.n	80013ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800137e:	4b30      	ldr	r3, [pc, #192]	; (8001440 <HAL_RCC_OscConfig+0x2b4>)
 8001380:	2201      	movs	r2, #1
 8001382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001384:	f7ff fc20 	bl	8000bc8 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800138c:	f7ff fc1c 	bl	8000bc8 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e164      	b.n	8001668 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800139e:	4b26      	ldr	r3, [pc, #152]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 80013a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d0f0      	beq.n	800138c <HAL_RCC_OscConfig+0x200>
 80013aa:	e015      	b.n	80013d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ac:	4b24      	ldr	r3, [pc, #144]	; (8001440 <HAL_RCC_OscConfig+0x2b4>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b2:	f7ff fc09 	bl	8000bc8 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ba:	f7ff fc05 	bl	8000bc8 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e14d      	b.n	8001668 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013cc:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 80013ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1f0      	bne.n	80013ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0304 	and.w	r3, r3, #4
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f000 80a0 	beq.w	8001526 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013e6:	2300      	movs	r3, #0
 80013e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ea:	4b13      	ldr	r3, [pc, #76]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d10f      	bne.n	8001416 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	4a0e      	ldr	r2, [pc, #56]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 8001400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001404:	6413      	str	r3, [r2, #64]	; 0x40
 8001406:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001412:	2301      	movs	r3, #1
 8001414:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <HAL_RCC_OscConfig+0x2b8>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141e:	2b00      	cmp	r3, #0
 8001420:	d121      	bne.n	8001466 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <HAL_RCC_OscConfig+0x2b8>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a07      	ldr	r2, [pc, #28]	; (8001444 <HAL_RCC_OscConfig+0x2b8>)
 8001428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800142c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800142e:	f7ff fbcb 	bl	8000bc8 <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001434:	e011      	b.n	800145a <HAL_RCC_OscConfig+0x2ce>
 8001436:	bf00      	nop
 8001438:	40023800 	.word	0x40023800
 800143c:	42470000 	.word	0x42470000
 8001440:	42470e80 	.word	0x42470e80
 8001444:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001448:	f7ff fbbe 	bl	8000bc8 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e106      	b.n	8001668 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800145a:	4b85      	ldr	r3, [pc, #532]	; (8001670 <HAL_RCC_OscConfig+0x4e4>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0f0      	beq.n	8001448 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d106      	bne.n	800147c <HAL_RCC_OscConfig+0x2f0>
 800146e:	4b81      	ldr	r3, [pc, #516]	; (8001674 <HAL_RCC_OscConfig+0x4e8>)
 8001470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001472:	4a80      	ldr	r2, [pc, #512]	; (8001674 <HAL_RCC_OscConfig+0x4e8>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	6713      	str	r3, [r2, #112]	; 0x70
 800147a:	e01c      	b.n	80014b6 <HAL_RCC_OscConfig+0x32a>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	2b05      	cmp	r3, #5
 8001482:	d10c      	bne.n	800149e <HAL_RCC_OscConfig+0x312>
 8001484:	4b7b      	ldr	r3, [pc, #492]	; (8001674 <HAL_RCC_OscConfig+0x4e8>)
 8001486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001488:	4a7a      	ldr	r2, [pc, #488]	; (8001674 <HAL_RCC_OscConfig+0x4e8>)
 800148a:	f043 0304 	orr.w	r3, r3, #4
 800148e:	6713      	str	r3, [r2, #112]	; 0x70
 8001490:	4b78      	ldr	r3, [pc, #480]	; (8001674 <HAL_RCC_OscConfig+0x4e8>)
 8001492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001494:	4a77      	ldr	r2, [pc, #476]	; (8001674 <HAL_RCC_OscConfig+0x4e8>)
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	6713      	str	r3, [r2, #112]	; 0x70
 800149c:	e00b      	b.n	80014b6 <HAL_RCC_OscConfig+0x32a>
 800149e:	4b75      	ldr	r3, [pc, #468]	; (8001674 <HAL_RCC_OscConfig+0x4e8>)
 80014a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a2:	4a74      	ldr	r2, [pc, #464]	; (8001674 <HAL_RCC_OscConfig+0x4e8>)
 80014a4:	f023 0301 	bic.w	r3, r3, #1
 80014a8:	6713      	str	r3, [r2, #112]	; 0x70
 80014aa:	4b72      	ldr	r3, [pc, #456]	; (8001674 <HAL_RCC_OscConfig+0x4e8>)
 80014ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ae:	4a71      	ldr	r2, [pc, #452]	; (8001674 <HAL_RCC_OscConfig+0x4e8>)
 80014b0:	f023 0304 	bic.w	r3, r3, #4
 80014b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d015      	beq.n	80014ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014be:	f7ff fb83 	bl	8000bc8 <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c4:	e00a      	b.n	80014dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014c6:	f7ff fb7f 	bl	8000bc8 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e0c5      	b.n	8001668 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014dc:	4b65      	ldr	r3, [pc, #404]	; (8001674 <HAL_RCC_OscConfig+0x4e8>)
 80014de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d0ee      	beq.n	80014c6 <HAL_RCC_OscConfig+0x33a>
 80014e8:	e014      	b.n	8001514 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ea:	f7ff fb6d 	bl	8000bc8 <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014f0:	e00a      	b.n	8001508 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014f2:	f7ff fb69 	bl	8000bc8 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001500:	4293      	cmp	r3, r2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e0af      	b.n	8001668 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001508:	4b5a      	ldr	r3, [pc, #360]	; (8001674 <HAL_RCC_OscConfig+0x4e8>)
 800150a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1ee      	bne.n	80014f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001514:	7dfb      	ldrb	r3, [r7, #23]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d105      	bne.n	8001526 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800151a:	4b56      	ldr	r3, [pc, #344]	; (8001674 <HAL_RCC_OscConfig+0x4e8>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	4a55      	ldr	r2, [pc, #340]	; (8001674 <HAL_RCC_OscConfig+0x4e8>)
 8001520:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001524:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	2b00      	cmp	r3, #0
 800152c:	f000 809b 	beq.w	8001666 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001530:	4b50      	ldr	r3, [pc, #320]	; (8001674 <HAL_RCC_OscConfig+0x4e8>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f003 030c 	and.w	r3, r3, #12
 8001538:	2b08      	cmp	r3, #8
 800153a:	d05c      	beq.n	80015f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	2b02      	cmp	r3, #2
 8001542:	d141      	bne.n	80015c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001544:	4b4c      	ldr	r3, [pc, #304]	; (8001678 <HAL_RCC_OscConfig+0x4ec>)
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154a:	f7ff fb3d 	bl	8000bc8 <HAL_GetTick>
 800154e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001552:	f7ff fb39 	bl	8000bc8 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e081      	b.n	8001668 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001564:	4b43      	ldr	r3, [pc, #268]	; (8001674 <HAL_RCC_OscConfig+0x4e8>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1f0      	bne.n	8001552 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	69da      	ldr	r2, [r3, #28]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a1b      	ldr	r3, [r3, #32]
 8001578:	431a      	orrs	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157e:	019b      	lsls	r3, r3, #6
 8001580:	431a      	orrs	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001586:	085b      	lsrs	r3, r3, #1
 8001588:	3b01      	subs	r3, #1
 800158a:	041b      	lsls	r3, r3, #16
 800158c:	431a      	orrs	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001592:	061b      	lsls	r3, r3, #24
 8001594:	4937      	ldr	r1, [pc, #220]	; (8001674 <HAL_RCC_OscConfig+0x4e8>)
 8001596:	4313      	orrs	r3, r2
 8001598:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800159a:	4b37      	ldr	r3, [pc, #220]	; (8001678 <HAL_RCC_OscConfig+0x4ec>)
 800159c:	2201      	movs	r2, #1
 800159e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a0:	f7ff fb12 	bl	8000bc8 <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015a8:	f7ff fb0e 	bl	8000bc8 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e056      	b.n	8001668 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ba:	4b2e      	ldr	r3, [pc, #184]	; (8001674 <HAL_RCC_OscConfig+0x4e8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d0f0      	beq.n	80015a8 <HAL_RCC_OscConfig+0x41c>
 80015c6:	e04e      	b.n	8001666 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c8:	4b2b      	ldr	r3, [pc, #172]	; (8001678 <HAL_RCC_OscConfig+0x4ec>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ce:	f7ff fafb 	bl	8000bc8 <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015d6:	f7ff faf7 	bl	8000bc8 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e03f      	b.n	8001668 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e8:	4b22      	ldr	r3, [pc, #136]	; (8001674 <HAL_RCC_OscConfig+0x4e8>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1f0      	bne.n	80015d6 <HAL_RCC_OscConfig+0x44a>
 80015f4:	e037      	b.n	8001666 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d101      	bne.n	8001602 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e032      	b.n	8001668 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001602:	4b1c      	ldr	r3, [pc, #112]	; (8001674 <HAL_RCC_OscConfig+0x4e8>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d028      	beq.n	8001662 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800161a:	429a      	cmp	r2, r3
 800161c:	d121      	bne.n	8001662 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001628:	429a      	cmp	r2, r3
 800162a:	d11a      	bne.n	8001662 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001632:	4013      	ands	r3, r2
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001638:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800163a:	4293      	cmp	r3, r2
 800163c:	d111      	bne.n	8001662 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001648:	085b      	lsrs	r3, r3, #1
 800164a:	3b01      	subs	r3, #1
 800164c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800164e:	429a      	cmp	r2, r3
 8001650:	d107      	bne.n	8001662 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800165e:	429a      	cmp	r2, r3
 8001660:	d001      	beq.n	8001666 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e000      	b.n	8001668 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001666:	2300      	movs	r3, #0
}
 8001668:	4618      	mov	r0, r3
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40007000 	.word	0x40007000
 8001674:	40023800 	.word	0x40023800
 8001678:	42470060 	.word	0x42470060

0800167c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d101      	bne.n	8001690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e0cc      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001690:	4b68      	ldr	r3, [pc, #416]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0307 	and.w	r3, r3, #7
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	429a      	cmp	r2, r3
 800169c:	d90c      	bls.n	80016b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800169e:	4b65      	ldr	r3, [pc, #404]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a6:	4b63      	ldr	r3, [pc, #396]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d001      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e0b8      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d020      	beq.n	8001706 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d005      	beq.n	80016dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016d0:	4b59      	ldr	r3, [pc, #356]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	4a58      	ldr	r2, [pc, #352]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80016d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0308 	and.w	r3, r3, #8
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d005      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016e8:	4b53      	ldr	r3, [pc, #332]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	4a52      	ldr	r2, [pc, #328]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f4:	4b50      	ldr	r3, [pc, #320]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	494d      	ldr	r1, [pc, #308]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 8001702:	4313      	orrs	r3, r2
 8001704:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d044      	beq.n	800179c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d107      	bne.n	800172a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171a:	4b47      	ldr	r3, [pc, #284]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d119      	bne.n	800175a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e07f      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b02      	cmp	r3, #2
 8001730:	d003      	beq.n	800173a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001736:	2b03      	cmp	r3, #3
 8001738:	d107      	bne.n	800174a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800173a:	4b3f      	ldr	r3, [pc, #252]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d109      	bne.n	800175a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e06f      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800174a:	4b3b      	ldr	r3, [pc, #236]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e067      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800175a:	4b37      	ldr	r3, [pc, #220]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f023 0203 	bic.w	r2, r3, #3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	4934      	ldr	r1, [pc, #208]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 8001768:	4313      	orrs	r3, r2
 800176a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800176c:	f7ff fa2c 	bl	8000bc8 <HAL_GetTick>
 8001770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001772:	e00a      	b.n	800178a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001774:	f7ff fa28 	bl	8000bc8 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001782:	4293      	cmp	r3, r2
 8001784:	d901      	bls.n	800178a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e04f      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800178a:	4b2b      	ldr	r3, [pc, #172]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f003 020c 	and.w	r2, r3, #12
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	429a      	cmp	r2, r3
 800179a:	d1eb      	bne.n	8001774 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800179c:	4b25      	ldr	r3, [pc, #148]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0307 	and.w	r3, r3, #7
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d20c      	bcs.n	80017c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017aa:	4b22      	ldr	r3, [pc, #136]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b2:	4b20      	ldr	r3, [pc, #128]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d001      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e032      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d008      	beq.n	80017e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017d0:	4b19      	ldr	r3, [pc, #100]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	4916      	ldr	r1, [pc, #88]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0308 	and.w	r3, r3, #8
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d009      	beq.n	8001802 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017ee:	4b12      	ldr	r3, [pc, #72]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	490e      	ldr	r1, [pc, #56]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001802:	f000 f821 	bl	8001848 <HAL_RCC_GetSysClockFreq>
 8001806:	4602      	mov	r2, r0
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	091b      	lsrs	r3, r3, #4
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	490a      	ldr	r1, [pc, #40]	; (800183c <HAL_RCC_ClockConfig+0x1c0>)
 8001814:	5ccb      	ldrb	r3, [r1, r3]
 8001816:	fa22 f303 	lsr.w	r3, r2, r3
 800181a:	4a09      	ldr	r2, [pc, #36]	; (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 800181c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800181e:	4b09      	ldr	r3, [pc, #36]	; (8001844 <HAL_RCC_ClockConfig+0x1c8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff f8e6 	bl	80009f4 <HAL_InitTick>

  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40023c00 	.word	0x40023c00
 8001838:	40023800 	.word	0x40023800
 800183c:	08005240 	.word	0x08005240
 8001840:	20000004 	.word	0x20000004
 8001844:	20000008 	.word	0x20000008

08001848 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001848:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800184c:	b084      	sub	sp, #16
 800184e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001850:	2300      	movs	r3, #0
 8001852:	607b      	str	r3, [r7, #4]
 8001854:	2300      	movs	r3, #0
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	2300      	movs	r3, #0
 800185a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800185c:	2300      	movs	r3, #0
 800185e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001860:	4b67      	ldr	r3, [pc, #412]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f003 030c 	and.w	r3, r3, #12
 8001868:	2b08      	cmp	r3, #8
 800186a:	d00d      	beq.n	8001888 <HAL_RCC_GetSysClockFreq+0x40>
 800186c:	2b08      	cmp	r3, #8
 800186e:	f200 80bd 	bhi.w	80019ec <HAL_RCC_GetSysClockFreq+0x1a4>
 8001872:	2b00      	cmp	r3, #0
 8001874:	d002      	beq.n	800187c <HAL_RCC_GetSysClockFreq+0x34>
 8001876:	2b04      	cmp	r3, #4
 8001878:	d003      	beq.n	8001882 <HAL_RCC_GetSysClockFreq+0x3a>
 800187a:	e0b7      	b.n	80019ec <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800187c:	4b61      	ldr	r3, [pc, #388]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800187e:	60bb      	str	r3, [r7, #8]
       break;
 8001880:	e0b7      	b.n	80019f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001882:	4b61      	ldr	r3, [pc, #388]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001884:	60bb      	str	r3, [r7, #8]
      break;
 8001886:	e0b4      	b.n	80019f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001888:	4b5d      	ldr	r3, [pc, #372]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001890:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001892:	4b5b      	ldr	r3, [pc, #364]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d04d      	beq.n	800193a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800189e:	4b58      	ldr	r3, [pc, #352]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	099b      	lsrs	r3, r3, #6
 80018a4:	461a      	mov	r2, r3
 80018a6:	f04f 0300 	mov.w	r3, #0
 80018aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80018ae:	f04f 0100 	mov.w	r1, #0
 80018b2:	ea02 0800 	and.w	r8, r2, r0
 80018b6:	ea03 0901 	and.w	r9, r3, r1
 80018ba:	4640      	mov	r0, r8
 80018bc:	4649      	mov	r1, r9
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	f04f 0300 	mov.w	r3, #0
 80018c6:	014b      	lsls	r3, r1, #5
 80018c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80018cc:	0142      	lsls	r2, r0, #5
 80018ce:	4610      	mov	r0, r2
 80018d0:	4619      	mov	r1, r3
 80018d2:	ebb0 0008 	subs.w	r0, r0, r8
 80018d6:	eb61 0109 	sbc.w	r1, r1, r9
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	018b      	lsls	r3, r1, #6
 80018e4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80018e8:	0182      	lsls	r2, r0, #6
 80018ea:	1a12      	subs	r2, r2, r0
 80018ec:	eb63 0301 	sbc.w	r3, r3, r1
 80018f0:	f04f 0000 	mov.w	r0, #0
 80018f4:	f04f 0100 	mov.w	r1, #0
 80018f8:	00d9      	lsls	r1, r3, #3
 80018fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80018fe:	00d0      	lsls	r0, r2, #3
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	eb12 0208 	adds.w	r2, r2, r8
 8001908:	eb43 0309 	adc.w	r3, r3, r9
 800190c:	f04f 0000 	mov.w	r0, #0
 8001910:	f04f 0100 	mov.w	r1, #0
 8001914:	0259      	lsls	r1, r3, #9
 8001916:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800191a:	0250      	lsls	r0, r2, #9
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4610      	mov	r0, r2
 8001922:	4619      	mov	r1, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	461a      	mov	r2, r3
 8001928:	f04f 0300 	mov.w	r3, #0
 800192c:	f7fe fc58 	bl	80001e0 <__aeabi_uldivmod>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4613      	mov	r3, r2
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	e04a      	b.n	80019d0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800193a:	4b31      	ldr	r3, [pc, #196]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	099b      	lsrs	r3, r3, #6
 8001940:	461a      	mov	r2, r3
 8001942:	f04f 0300 	mov.w	r3, #0
 8001946:	f240 10ff 	movw	r0, #511	; 0x1ff
 800194a:	f04f 0100 	mov.w	r1, #0
 800194e:	ea02 0400 	and.w	r4, r2, r0
 8001952:	ea03 0501 	and.w	r5, r3, r1
 8001956:	4620      	mov	r0, r4
 8001958:	4629      	mov	r1, r5
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	f04f 0300 	mov.w	r3, #0
 8001962:	014b      	lsls	r3, r1, #5
 8001964:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001968:	0142      	lsls	r2, r0, #5
 800196a:	4610      	mov	r0, r2
 800196c:	4619      	mov	r1, r3
 800196e:	1b00      	subs	r0, r0, r4
 8001970:	eb61 0105 	sbc.w	r1, r1, r5
 8001974:	f04f 0200 	mov.w	r2, #0
 8001978:	f04f 0300 	mov.w	r3, #0
 800197c:	018b      	lsls	r3, r1, #6
 800197e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001982:	0182      	lsls	r2, r0, #6
 8001984:	1a12      	subs	r2, r2, r0
 8001986:	eb63 0301 	sbc.w	r3, r3, r1
 800198a:	f04f 0000 	mov.w	r0, #0
 800198e:	f04f 0100 	mov.w	r1, #0
 8001992:	00d9      	lsls	r1, r3, #3
 8001994:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001998:	00d0      	lsls	r0, r2, #3
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	1912      	adds	r2, r2, r4
 80019a0:	eb45 0303 	adc.w	r3, r5, r3
 80019a4:	f04f 0000 	mov.w	r0, #0
 80019a8:	f04f 0100 	mov.w	r1, #0
 80019ac:	0299      	lsls	r1, r3, #10
 80019ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80019b2:	0290      	lsls	r0, r2, #10
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	4610      	mov	r0, r2
 80019ba:	4619      	mov	r1, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	461a      	mov	r2, r3
 80019c0:	f04f 0300 	mov.w	r3, #0
 80019c4:	f7fe fc0c 	bl	80001e0 <__aeabi_uldivmod>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4613      	mov	r3, r2
 80019ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019d0:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	0c1b      	lsrs	r3, r3, #16
 80019d6:	f003 0303 	and.w	r3, r3, #3
 80019da:	3301      	adds	r3, #1
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e8:	60bb      	str	r3, [r7, #8]
      break;
 80019ea:	e002      	b.n	80019f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019ec:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80019ee:	60bb      	str	r3, [r7, #8]
      break;
 80019f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019f2:	68bb      	ldr	r3, [r7, #8]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80019fe:	bf00      	nop
 8001a00:	40023800 	.word	0x40023800
 8001a04:	00f42400 	.word	0x00f42400
 8001a08:	007a1200 	.word	0x007a1200

08001a0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a10:	4b03      	ldr	r3, [pc, #12]	; (8001a20 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a12:	681b      	ldr	r3, [r3, #0]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	20000004 	.word	0x20000004

08001a24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a28:	f7ff fff0 	bl	8001a0c <HAL_RCC_GetHCLKFreq>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	0a9b      	lsrs	r3, r3, #10
 8001a34:	f003 0307 	and.w	r3, r3, #7
 8001a38:	4903      	ldr	r1, [pc, #12]	; (8001a48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a3a:	5ccb      	ldrb	r3, [r1, r3]
 8001a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40023800 	.word	0x40023800
 8001a48:	08005250 	.word	0x08005250

08001a4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a50:	f7ff ffdc 	bl	8001a0c <HAL_RCC_GetHCLKFreq>
 8001a54:	4602      	mov	r2, r0
 8001a56:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	0b5b      	lsrs	r3, r3, #13
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	4903      	ldr	r1, [pc, #12]	; (8001a70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a62:	5ccb      	ldrb	r3, [r1, r3]
 8001a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	08005250 	.word	0x08005250

08001a74 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	220f      	movs	r2, #15
 8001a82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <HAL_RCC_GetClockConfig+0x5c>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 0203 	and.w	r2, r3, #3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a90:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <HAL_RCC_GetClockConfig+0x5c>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <HAL_RCC_GetClockConfig+0x5c>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001aa8:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <HAL_RCC_GetClockConfig+0x5c>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	08db      	lsrs	r3, r3, #3
 8001aae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ab6:	4b07      	ldr	r3, [pc, #28]	; (8001ad4 <HAL_RCC_GetClockConfig+0x60>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0207 	and.w	r2, r3, #7
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	601a      	str	r2, [r3, #0]
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	40023c00 	.word	0x40023c00

08001ad8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e041      	b.n	8001b6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d106      	bne.n	8001b04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f839 	bl	8001b76 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2202      	movs	r2, #2
 8001b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3304      	adds	r3, #4
 8001b14:	4619      	mov	r1, r3
 8001b16:	4610      	mov	r0, r2
 8001b18:	f000 f9ca 	bl	8001eb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d001      	beq.n	8001ba4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e044      	b.n	8001c2e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 0201 	orr.w	r2, r2, #1
 8001bba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a1e      	ldr	r2, [pc, #120]	; (8001c3c <HAL_TIM_Base_Start_IT+0xb0>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d018      	beq.n	8001bf8 <HAL_TIM_Base_Start_IT+0x6c>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bce:	d013      	beq.n	8001bf8 <HAL_TIM_Base_Start_IT+0x6c>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a1a      	ldr	r2, [pc, #104]	; (8001c40 <HAL_TIM_Base_Start_IT+0xb4>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d00e      	beq.n	8001bf8 <HAL_TIM_Base_Start_IT+0x6c>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a19      	ldr	r2, [pc, #100]	; (8001c44 <HAL_TIM_Base_Start_IT+0xb8>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d009      	beq.n	8001bf8 <HAL_TIM_Base_Start_IT+0x6c>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a17      	ldr	r2, [pc, #92]	; (8001c48 <HAL_TIM_Base_Start_IT+0xbc>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d004      	beq.n	8001bf8 <HAL_TIM_Base_Start_IT+0x6c>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a16      	ldr	r2, [pc, #88]	; (8001c4c <HAL_TIM_Base_Start_IT+0xc0>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d111      	bne.n	8001c1c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2b06      	cmp	r3, #6
 8001c08:	d010      	beq.n	8001c2c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f042 0201 	orr.w	r2, r2, #1
 8001c18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c1a:	e007      	b.n	8001c2c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0201 	orr.w	r2, r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40010000 	.word	0x40010000
 8001c40:	40000400 	.word	0x40000400
 8001c44:	40000800 	.word	0x40000800
 8001c48:	40000c00 	.word	0x40000c00
 8001c4c:	40014000 	.word	0x40014000

08001c50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d122      	bne.n	8001cac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d11b      	bne.n	8001cac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f06f 0202 	mvn.w	r2, #2
 8001c7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2201      	movs	r2, #1
 8001c82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	f003 0303 	and.w	r3, r3, #3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 f8ee 	bl	8001e74 <HAL_TIM_IC_CaptureCallback>
 8001c98:	e005      	b.n	8001ca6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f8e0 	bl	8001e60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 f8f1 	bl	8001e88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	f003 0304 	and.w	r3, r3, #4
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	d122      	bne.n	8001d00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	2b04      	cmp	r3, #4
 8001cc6:	d11b      	bne.n	8001d00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f06f 0204 	mvn.w	r2, #4
 8001cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f8c4 	bl	8001e74 <HAL_TIM_IC_CaptureCallback>
 8001cec:	e005      	b.n	8001cfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f8b6 	bl	8001e60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 f8c7 	bl	8001e88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	f003 0308 	and.w	r3, r3, #8
 8001d0a:	2b08      	cmp	r3, #8
 8001d0c:	d122      	bne.n	8001d54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	f003 0308 	and.w	r3, r3, #8
 8001d18:	2b08      	cmp	r3, #8
 8001d1a:	d11b      	bne.n	8001d54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f06f 0208 	mvn.w	r2, #8
 8001d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2204      	movs	r2, #4
 8001d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	f003 0303 	and.w	r3, r3, #3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f89a 	bl	8001e74 <HAL_TIM_IC_CaptureCallback>
 8001d40:	e005      	b.n	8001d4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f88c 	bl	8001e60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 f89d 	bl	8001e88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	f003 0310 	and.w	r3, r3, #16
 8001d5e:	2b10      	cmp	r3, #16
 8001d60:	d122      	bne.n	8001da8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	f003 0310 	and.w	r3, r3, #16
 8001d6c:	2b10      	cmp	r3, #16
 8001d6e:	d11b      	bne.n	8001da8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f06f 0210 	mvn.w	r2, #16
 8001d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2208      	movs	r2, #8
 8001d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 f870 	bl	8001e74 <HAL_TIM_IC_CaptureCallback>
 8001d94:	e005      	b.n	8001da2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 f862 	bl	8001e60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 f873 	bl	8001e88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d10e      	bne.n	8001dd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d107      	bne.n	8001dd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f06f 0201 	mvn.w	r2, #1
 8001dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7fe fd84 	bl	80008dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dde:	2b80      	cmp	r3, #128	; 0x80
 8001de0:	d10e      	bne.n	8001e00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dec:	2b80      	cmp	r3, #128	; 0x80
 8001dee:	d107      	bne.n	8001e00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f8e2 	bl	8001fc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e0a:	2b40      	cmp	r3, #64	; 0x40
 8001e0c:	d10e      	bne.n	8001e2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e18:	2b40      	cmp	r3, #64	; 0x40
 8001e1a:	d107      	bne.n	8001e2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 f838 	bl	8001e9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	f003 0320 	and.w	r3, r3, #32
 8001e36:	2b20      	cmp	r3, #32
 8001e38:	d10e      	bne.n	8001e58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	f003 0320 	and.w	r3, r3, #32
 8001e44:	2b20      	cmp	r3, #32
 8001e46:	d107      	bne.n	8001e58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f06f 0220 	mvn.w	r2, #32
 8001e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f8ac 	bl	8001fb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e58:	bf00      	nop
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a34      	ldr	r2, [pc, #208]	; (8001f94 <TIM_Base_SetConfig+0xe4>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d00f      	beq.n	8001ee8 <TIM_Base_SetConfig+0x38>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ece:	d00b      	beq.n	8001ee8 <TIM_Base_SetConfig+0x38>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a31      	ldr	r2, [pc, #196]	; (8001f98 <TIM_Base_SetConfig+0xe8>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d007      	beq.n	8001ee8 <TIM_Base_SetConfig+0x38>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a30      	ldr	r2, [pc, #192]	; (8001f9c <TIM_Base_SetConfig+0xec>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d003      	beq.n	8001ee8 <TIM_Base_SetConfig+0x38>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a2f      	ldr	r2, [pc, #188]	; (8001fa0 <TIM_Base_SetConfig+0xf0>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d108      	bne.n	8001efa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a25      	ldr	r2, [pc, #148]	; (8001f94 <TIM_Base_SetConfig+0xe4>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d01b      	beq.n	8001f3a <TIM_Base_SetConfig+0x8a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f08:	d017      	beq.n	8001f3a <TIM_Base_SetConfig+0x8a>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a22      	ldr	r2, [pc, #136]	; (8001f98 <TIM_Base_SetConfig+0xe8>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d013      	beq.n	8001f3a <TIM_Base_SetConfig+0x8a>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a21      	ldr	r2, [pc, #132]	; (8001f9c <TIM_Base_SetConfig+0xec>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d00f      	beq.n	8001f3a <TIM_Base_SetConfig+0x8a>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a20      	ldr	r2, [pc, #128]	; (8001fa0 <TIM_Base_SetConfig+0xf0>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d00b      	beq.n	8001f3a <TIM_Base_SetConfig+0x8a>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a1f      	ldr	r2, [pc, #124]	; (8001fa4 <TIM_Base_SetConfig+0xf4>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d007      	beq.n	8001f3a <TIM_Base_SetConfig+0x8a>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a1e      	ldr	r2, [pc, #120]	; (8001fa8 <TIM_Base_SetConfig+0xf8>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d003      	beq.n	8001f3a <TIM_Base_SetConfig+0x8a>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a1d      	ldr	r2, [pc, #116]	; (8001fac <TIM_Base_SetConfig+0xfc>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d108      	bne.n	8001f4c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a08      	ldr	r2, [pc, #32]	; (8001f94 <TIM_Base_SetConfig+0xe4>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d103      	bne.n	8001f80 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	691a      	ldr	r2, [r3, #16]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	615a      	str	r2, [r3, #20]
}
 8001f86:	bf00      	nop
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	40010000 	.word	0x40010000
 8001f98:	40000400 	.word	0x40000400
 8001f9c:	40000800 	.word	0x40000800
 8001fa0:	40000c00 	.word	0x40000c00
 8001fa4:	40014000 	.word	0x40014000
 8001fa8:	40014400 	.word	0x40014400
 8001fac:	40014800 	.word	0x40014800

08001fb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e03f      	b.n	800206a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d106      	bne.n	8002004 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7fe fcb0 	bl	8000964 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2224      	movs	r2, #36	; 0x24
 8002008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800201a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 f829 	bl	8002074 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	691a      	ldr	r2, [r3, #16]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002030:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	695a      	ldr	r2, [r3, #20]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002040:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68da      	ldr	r2, [r3, #12]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002050:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2220      	movs	r2, #32
 800205c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2220      	movs	r2, #32
 8002064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
	...

08002074 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002078:	b09f      	sub	sp, #124	; 0x7c
 800207a:	af00      	add	r7, sp, #0
 800207c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800207e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800208a:	68d9      	ldr	r1, [r3, #12]
 800208c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	ea40 0301 	orr.w	r3, r0, r1
 8002094:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	431a      	orrs	r2, r3
 80020a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	431a      	orrs	r2, r3
 80020a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80020ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80020b8:	f021 010c 	bic.w	r1, r1, #12
 80020bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020c2:	430b      	orrs	r3, r1
 80020c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	695b      	ldr	r3, [r3, #20]
 80020cc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80020d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020d2:	6999      	ldr	r1, [r3, #24]
 80020d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	ea40 0301 	orr.w	r3, r0, r1
 80020dc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80020de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	4bc5      	ldr	r3, [pc, #788]	; (80023f8 <UART_SetConfig+0x384>)
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d004      	beq.n	80020f2 <UART_SetConfig+0x7e>
 80020e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	4bc3      	ldr	r3, [pc, #780]	; (80023fc <UART_SetConfig+0x388>)
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d103      	bne.n	80020fa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80020f2:	f7ff fcab 	bl	8001a4c <HAL_RCC_GetPCLK2Freq>
 80020f6:	6778      	str	r0, [r7, #116]	; 0x74
 80020f8:	e002      	b.n	8002100 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80020fa:	f7ff fc93 	bl	8001a24 <HAL_RCC_GetPCLK1Freq>
 80020fe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002108:	f040 80b6 	bne.w	8002278 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800210c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800210e:	461c      	mov	r4, r3
 8002110:	f04f 0500 	mov.w	r5, #0
 8002114:	4622      	mov	r2, r4
 8002116:	462b      	mov	r3, r5
 8002118:	1891      	adds	r1, r2, r2
 800211a:	6439      	str	r1, [r7, #64]	; 0x40
 800211c:	415b      	adcs	r3, r3
 800211e:	647b      	str	r3, [r7, #68]	; 0x44
 8002120:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002124:	1912      	adds	r2, r2, r4
 8002126:	eb45 0303 	adc.w	r3, r5, r3
 800212a:	f04f 0000 	mov.w	r0, #0
 800212e:	f04f 0100 	mov.w	r1, #0
 8002132:	00d9      	lsls	r1, r3, #3
 8002134:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002138:	00d0      	lsls	r0, r2, #3
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	1911      	adds	r1, r2, r4
 8002140:	6639      	str	r1, [r7, #96]	; 0x60
 8002142:	416b      	adcs	r3, r5
 8002144:	667b      	str	r3, [r7, #100]	; 0x64
 8002146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	461a      	mov	r2, r3
 800214c:	f04f 0300 	mov.w	r3, #0
 8002150:	1891      	adds	r1, r2, r2
 8002152:	63b9      	str	r1, [r7, #56]	; 0x38
 8002154:	415b      	adcs	r3, r3
 8002156:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002158:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800215c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002160:	f7fe f83e 	bl	80001e0 <__aeabi_uldivmod>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	4ba5      	ldr	r3, [pc, #660]	; (8002400 <UART_SetConfig+0x38c>)
 800216a:	fba3 2302 	umull	r2, r3, r3, r2
 800216e:	095b      	lsrs	r3, r3, #5
 8002170:	011e      	lsls	r6, r3, #4
 8002172:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002174:	461c      	mov	r4, r3
 8002176:	f04f 0500 	mov.w	r5, #0
 800217a:	4622      	mov	r2, r4
 800217c:	462b      	mov	r3, r5
 800217e:	1891      	adds	r1, r2, r2
 8002180:	6339      	str	r1, [r7, #48]	; 0x30
 8002182:	415b      	adcs	r3, r3
 8002184:	637b      	str	r3, [r7, #52]	; 0x34
 8002186:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800218a:	1912      	adds	r2, r2, r4
 800218c:	eb45 0303 	adc.w	r3, r5, r3
 8002190:	f04f 0000 	mov.w	r0, #0
 8002194:	f04f 0100 	mov.w	r1, #0
 8002198:	00d9      	lsls	r1, r3, #3
 800219a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800219e:	00d0      	lsls	r0, r2, #3
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	1911      	adds	r1, r2, r4
 80021a6:	65b9      	str	r1, [r7, #88]	; 0x58
 80021a8:	416b      	adcs	r3, r5
 80021aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	461a      	mov	r2, r3
 80021b2:	f04f 0300 	mov.w	r3, #0
 80021b6:	1891      	adds	r1, r2, r2
 80021b8:	62b9      	str	r1, [r7, #40]	; 0x28
 80021ba:	415b      	adcs	r3, r3
 80021bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021c2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80021c6:	f7fe f80b 	bl	80001e0 <__aeabi_uldivmod>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4b8c      	ldr	r3, [pc, #560]	; (8002400 <UART_SetConfig+0x38c>)
 80021d0:	fba3 1302 	umull	r1, r3, r3, r2
 80021d4:	095b      	lsrs	r3, r3, #5
 80021d6:	2164      	movs	r1, #100	; 0x64
 80021d8:	fb01 f303 	mul.w	r3, r1, r3
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	3332      	adds	r3, #50	; 0x32
 80021e2:	4a87      	ldr	r2, [pc, #540]	; (8002400 <UART_SetConfig+0x38c>)
 80021e4:	fba2 2303 	umull	r2, r3, r2, r3
 80021e8:	095b      	lsrs	r3, r3, #5
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80021f0:	441e      	add	r6, r3
 80021f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021f4:	4618      	mov	r0, r3
 80021f6:	f04f 0100 	mov.w	r1, #0
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	1894      	adds	r4, r2, r2
 8002200:	623c      	str	r4, [r7, #32]
 8002202:	415b      	adcs	r3, r3
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
 8002206:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800220a:	1812      	adds	r2, r2, r0
 800220c:	eb41 0303 	adc.w	r3, r1, r3
 8002210:	f04f 0400 	mov.w	r4, #0
 8002214:	f04f 0500 	mov.w	r5, #0
 8002218:	00dd      	lsls	r5, r3, #3
 800221a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800221e:	00d4      	lsls	r4, r2, #3
 8002220:	4622      	mov	r2, r4
 8002222:	462b      	mov	r3, r5
 8002224:	1814      	adds	r4, r2, r0
 8002226:	653c      	str	r4, [r7, #80]	; 0x50
 8002228:	414b      	adcs	r3, r1
 800222a:	657b      	str	r3, [r7, #84]	; 0x54
 800222c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	461a      	mov	r2, r3
 8002232:	f04f 0300 	mov.w	r3, #0
 8002236:	1891      	adds	r1, r2, r2
 8002238:	61b9      	str	r1, [r7, #24]
 800223a:	415b      	adcs	r3, r3
 800223c:	61fb      	str	r3, [r7, #28]
 800223e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002242:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002246:	f7fd ffcb 	bl	80001e0 <__aeabi_uldivmod>
 800224a:	4602      	mov	r2, r0
 800224c:	460b      	mov	r3, r1
 800224e:	4b6c      	ldr	r3, [pc, #432]	; (8002400 <UART_SetConfig+0x38c>)
 8002250:	fba3 1302 	umull	r1, r3, r3, r2
 8002254:	095b      	lsrs	r3, r3, #5
 8002256:	2164      	movs	r1, #100	; 0x64
 8002258:	fb01 f303 	mul.w	r3, r1, r3
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	3332      	adds	r3, #50	; 0x32
 8002262:	4a67      	ldr	r2, [pc, #412]	; (8002400 <UART_SetConfig+0x38c>)
 8002264:	fba2 2303 	umull	r2, r3, r2, r3
 8002268:	095b      	lsrs	r3, r3, #5
 800226a:	f003 0207 	and.w	r2, r3, #7
 800226e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4432      	add	r2, r6
 8002274:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002276:	e0b9      	b.n	80023ec <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002278:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800227a:	461c      	mov	r4, r3
 800227c:	f04f 0500 	mov.w	r5, #0
 8002280:	4622      	mov	r2, r4
 8002282:	462b      	mov	r3, r5
 8002284:	1891      	adds	r1, r2, r2
 8002286:	6139      	str	r1, [r7, #16]
 8002288:	415b      	adcs	r3, r3
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002290:	1912      	adds	r2, r2, r4
 8002292:	eb45 0303 	adc.w	r3, r5, r3
 8002296:	f04f 0000 	mov.w	r0, #0
 800229a:	f04f 0100 	mov.w	r1, #0
 800229e:	00d9      	lsls	r1, r3, #3
 80022a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022a4:	00d0      	lsls	r0, r2, #3
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	eb12 0804 	adds.w	r8, r2, r4
 80022ae:	eb43 0905 	adc.w	r9, r3, r5
 80022b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f04f 0100 	mov.w	r1, #0
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	f04f 0300 	mov.w	r3, #0
 80022c4:	008b      	lsls	r3, r1, #2
 80022c6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80022ca:	0082      	lsls	r2, r0, #2
 80022cc:	4640      	mov	r0, r8
 80022ce:	4649      	mov	r1, r9
 80022d0:	f7fd ff86 	bl	80001e0 <__aeabi_uldivmod>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	4b49      	ldr	r3, [pc, #292]	; (8002400 <UART_SetConfig+0x38c>)
 80022da:	fba3 2302 	umull	r2, r3, r3, r2
 80022de:	095b      	lsrs	r3, r3, #5
 80022e0:	011e      	lsls	r6, r3, #4
 80022e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022e4:	4618      	mov	r0, r3
 80022e6:	f04f 0100 	mov.w	r1, #0
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	1894      	adds	r4, r2, r2
 80022f0:	60bc      	str	r4, [r7, #8]
 80022f2:	415b      	adcs	r3, r3
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022fa:	1812      	adds	r2, r2, r0
 80022fc:	eb41 0303 	adc.w	r3, r1, r3
 8002300:	f04f 0400 	mov.w	r4, #0
 8002304:	f04f 0500 	mov.w	r5, #0
 8002308:	00dd      	lsls	r5, r3, #3
 800230a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800230e:	00d4      	lsls	r4, r2, #3
 8002310:	4622      	mov	r2, r4
 8002312:	462b      	mov	r3, r5
 8002314:	1814      	adds	r4, r2, r0
 8002316:	64bc      	str	r4, [r7, #72]	; 0x48
 8002318:	414b      	adcs	r3, r1
 800231a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800231c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	4618      	mov	r0, r3
 8002322:	f04f 0100 	mov.w	r1, #0
 8002326:	f04f 0200 	mov.w	r2, #0
 800232a:	f04f 0300 	mov.w	r3, #0
 800232e:	008b      	lsls	r3, r1, #2
 8002330:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002334:	0082      	lsls	r2, r0, #2
 8002336:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800233a:	f7fd ff51 	bl	80001e0 <__aeabi_uldivmod>
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	4b2f      	ldr	r3, [pc, #188]	; (8002400 <UART_SetConfig+0x38c>)
 8002344:	fba3 1302 	umull	r1, r3, r3, r2
 8002348:	095b      	lsrs	r3, r3, #5
 800234a:	2164      	movs	r1, #100	; 0x64
 800234c:	fb01 f303 	mul.w	r3, r1, r3
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	011b      	lsls	r3, r3, #4
 8002354:	3332      	adds	r3, #50	; 0x32
 8002356:	4a2a      	ldr	r2, [pc, #168]	; (8002400 <UART_SetConfig+0x38c>)
 8002358:	fba2 2303 	umull	r2, r3, r2, r3
 800235c:	095b      	lsrs	r3, r3, #5
 800235e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002362:	441e      	add	r6, r3
 8002364:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002366:	4618      	mov	r0, r3
 8002368:	f04f 0100 	mov.w	r1, #0
 800236c:	4602      	mov	r2, r0
 800236e:	460b      	mov	r3, r1
 8002370:	1894      	adds	r4, r2, r2
 8002372:	603c      	str	r4, [r7, #0]
 8002374:	415b      	adcs	r3, r3
 8002376:	607b      	str	r3, [r7, #4]
 8002378:	e9d7 2300 	ldrd	r2, r3, [r7]
 800237c:	1812      	adds	r2, r2, r0
 800237e:	eb41 0303 	adc.w	r3, r1, r3
 8002382:	f04f 0400 	mov.w	r4, #0
 8002386:	f04f 0500 	mov.w	r5, #0
 800238a:	00dd      	lsls	r5, r3, #3
 800238c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002390:	00d4      	lsls	r4, r2, #3
 8002392:	4622      	mov	r2, r4
 8002394:	462b      	mov	r3, r5
 8002396:	eb12 0a00 	adds.w	sl, r2, r0
 800239a:	eb43 0b01 	adc.w	fp, r3, r1
 800239e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f04f 0100 	mov.w	r1, #0
 80023a8:	f04f 0200 	mov.w	r2, #0
 80023ac:	f04f 0300 	mov.w	r3, #0
 80023b0:	008b      	lsls	r3, r1, #2
 80023b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80023b6:	0082      	lsls	r2, r0, #2
 80023b8:	4650      	mov	r0, sl
 80023ba:	4659      	mov	r1, fp
 80023bc:	f7fd ff10 	bl	80001e0 <__aeabi_uldivmod>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <UART_SetConfig+0x38c>)
 80023c6:	fba3 1302 	umull	r1, r3, r3, r2
 80023ca:	095b      	lsrs	r3, r3, #5
 80023cc:	2164      	movs	r1, #100	; 0x64
 80023ce:	fb01 f303 	mul.w	r3, r1, r3
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	011b      	lsls	r3, r3, #4
 80023d6:	3332      	adds	r3, #50	; 0x32
 80023d8:	4a09      	ldr	r2, [pc, #36]	; (8002400 <UART_SetConfig+0x38c>)
 80023da:	fba2 2303 	umull	r2, r3, r2, r3
 80023de:	095b      	lsrs	r3, r3, #5
 80023e0:	f003 020f 	and.w	r2, r3, #15
 80023e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4432      	add	r2, r6
 80023ea:	609a      	str	r2, [r3, #8]
}
 80023ec:	bf00      	nop
 80023ee:	377c      	adds	r7, #124	; 0x7c
 80023f0:	46bd      	mov	sp, r7
 80023f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023f6:	bf00      	nop
 80023f8:	40011000 	.word	0x40011000
 80023fc:	40011400 	.word	0x40011400
 8002400:	51eb851f 	.word	0x51eb851f

08002404 <__NVIC_SetPriority>:
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	6039      	str	r1, [r7, #0]
 800240e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002414:	2b00      	cmp	r3, #0
 8002416:	db0a      	blt.n	800242e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	b2da      	uxtb	r2, r3
 800241c:	490c      	ldr	r1, [pc, #48]	; (8002450 <__NVIC_SetPriority+0x4c>)
 800241e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002422:	0112      	lsls	r2, r2, #4
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	440b      	add	r3, r1
 8002428:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800242c:	e00a      	b.n	8002444 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	b2da      	uxtb	r2, r3
 8002432:	4908      	ldr	r1, [pc, #32]	; (8002454 <__NVIC_SetPriority+0x50>)
 8002434:	79fb      	ldrb	r3, [r7, #7]
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	3b04      	subs	r3, #4
 800243c:	0112      	lsls	r2, r2, #4
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	440b      	add	r3, r1
 8002442:	761a      	strb	r2, [r3, #24]
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	e000e100 	.word	0xe000e100
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800245c:	4b05      	ldr	r3, [pc, #20]	; (8002474 <SysTick_Handler+0x1c>)
 800245e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002460:	f001 fd28 	bl	8003eb4 <xTaskGetSchedulerState>
 8002464:	4603      	mov	r3, r0
 8002466:	2b01      	cmp	r3, #1
 8002468:	d001      	beq.n	800246e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800246a:	f002 fb0d 	bl	8004a88 <xPortSysTickHandler>
  }
}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	e000e010 	.word	0xe000e010

08002478 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800247c:	2100      	movs	r1, #0
 800247e:	f06f 0004 	mvn.w	r0, #4
 8002482:	f7ff ffbf 	bl	8002404 <__NVIC_SetPriority>
#endif
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
	...

0800248c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002492:	f3ef 8305 	mrs	r3, IPSR
 8002496:	603b      	str	r3, [r7, #0]
  return(result);
 8002498:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800249e:	f06f 0305 	mvn.w	r3, #5
 80024a2:	607b      	str	r3, [r7, #4]
 80024a4:	e00c      	b.n	80024c0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80024a6:	4b0a      	ldr	r3, [pc, #40]	; (80024d0 <osKernelInitialize+0x44>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d105      	bne.n	80024ba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80024ae:	4b08      	ldr	r3, [pc, #32]	; (80024d0 <osKernelInitialize+0x44>)
 80024b0:	2201      	movs	r2, #1
 80024b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	607b      	str	r3, [r7, #4]
 80024b8:	e002      	b.n	80024c0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80024ba:	f04f 33ff 	mov.w	r3, #4294967295
 80024be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80024c0:	687b      	ldr	r3, [r7, #4]
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	20000098 	.word	0x20000098

080024d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024da:	f3ef 8305 	mrs	r3, IPSR
 80024de:	603b      	str	r3, [r7, #0]
  return(result);
 80024e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <osKernelStart+0x1a>
    stat = osErrorISR;
 80024e6:	f06f 0305 	mvn.w	r3, #5
 80024ea:	607b      	str	r3, [r7, #4]
 80024ec:	e010      	b.n	8002510 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80024ee:	4b0b      	ldr	r3, [pc, #44]	; (800251c <osKernelStart+0x48>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d109      	bne.n	800250a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80024f6:	f7ff ffbf 	bl	8002478 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80024fa:	4b08      	ldr	r3, [pc, #32]	; (800251c <osKernelStart+0x48>)
 80024fc:	2202      	movs	r2, #2
 80024fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002500:	f001 f87c 	bl	80035fc <vTaskStartScheduler>
      stat = osOK;
 8002504:	2300      	movs	r3, #0
 8002506:	607b      	str	r3, [r7, #4]
 8002508:	e002      	b.n	8002510 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800250a:	f04f 33ff 	mov.w	r3, #4294967295
 800250e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002510:	687b      	ldr	r3, [r7, #4]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20000098 	.word	0x20000098

08002520 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002520:	b580      	push	{r7, lr}
 8002522:	b08e      	sub	sp, #56	; 0x38
 8002524:	af04      	add	r7, sp, #16
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800252c:	2300      	movs	r3, #0
 800252e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002530:	f3ef 8305 	mrs	r3, IPSR
 8002534:	617b      	str	r3, [r7, #20]
  return(result);
 8002536:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002538:	2b00      	cmp	r3, #0
 800253a:	d17e      	bne.n	800263a <osThreadNew+0x11a>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d07b      	beq.n	800263a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002542:	2380      	movs	r3, #128	; 0x80
 8002544:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002546:	2318      	movs	r3, #24
 8002548:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800254a:	2300      	movs	r3, #0
 800254c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800254e:	f04f 33ff 	mov.w	r3, #4294967295
 8002552:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d045      	beq.n	80025e6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d002      	beq.n	8002568 <osThreadNew+0x48>
        name = attr->name;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d002      	beq.n	8002576 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d008      	beq.n	800258e <osThreadNew+0x6e>
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	2b38      	cmp	r3, #56	; 0x38
 8002580:	d805      	bhi.n	800258e <osThreadNew+0x6e>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <osThreadNew+0x72>
        return (NULL);
 800258e:	2300      	movs	r3, #0
 8002590:	e054      	b.n	800263c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	089b      	lsrs	r3, r3, #2
 80025a0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00e      	beq.n	80025c8 <osThreadNew+0xa8>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	2bbb      	cmp	r3, #187	; 0xbb
 80025b0:	d90a      	bls.n	80025c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d006      	beq.n	80025c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d002      	beq.n	80025c8 <osThreadNew+0xa8>
        mem = 1;
 80025c2:	2301      	movs	r3, #1
 80025c4:	61bb      	str	r3, [r7, #24]
 80025c6:	e010      	b.n	80025ea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10c      	bne.n	80025ea <osThreadNew+0xca>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d108      	bne.n	80025ea <osThreadNew+0xca>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d104      	bne.n	80025ea <osThreadNew+0xca>
          mem = 0;
 80025e0:	2300      	movs	r3, #0
 80025e2:	61bb      	str	r3, [r7, #24]
 80025e4:	e001      	b.n	80025ea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d110      	bne.n	8002612 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80025f8:	9202      	str	r2, [sp, #8]
 80025fa:	9301      	str	r3, [sp, #4]
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	6a3a      	ldr	r2, [r7, #32]
 8002604:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 fe0c 	bl	8003224 <xTaskCreateStatic>
 800260c:	4603      	mov	r3, r0
 800260e:	613b      	str	r3, [r7, #16]
 8002610:	e013      	b.n	800263a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d110      	bne.n	800263a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002618:	6a3b      	ldr	r3, [r7, #32]
 800261a:	b29a      	uxth	r2, r3
 800261c:	f107 0310 	add.w	r3, r7, #16
 8002620:	9301      	str	r3, [sp, #4]
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f000 fe57 	bl	80032de <xTaskCreate>
 8002630:	4603      	mov	r3, r0
 8002632:	2b01      	cmp	r3, #1
 8002634:	d001      	beq.n	800263a <osThreadNew+0x11a>
            hTask = NULL;
 8002636:	2300      	movs	r3, #0
 8002638:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800263a:	693b      	ldr	r3, [r7, #16]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3728      	adds	r7, #40	; 0x28
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800264c:	f3ef 8305 	mrs	r3, IPSR
 8002650:	60bb      	str	r3, [r7, #8]
  return(result);
 8002652:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <osDelay+0x1c>
    stat = osErrorISR;
 8002658:	f06f 0305 	mvn.w	r3, #5
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	e007      	b.n	8002670 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002660:	2300      	movs	r3, #0
 8002662:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d002      	beq.n	8002670 <osDelay+0x2c>
      vTaskDelay(ticks);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 ff92 	bl	8003594 <vTaskDelay>
    }
  }

  return (stat);
 8002670:	68fb      	ldr	r3, [r7, #12]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
	...

0800267c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4a07      	ldr	r2, [pc, #28]	; (80026a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800268c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	4a06      	ldr	r2, [pc, #24]	; (80026ac <vApplicationGetIdleTaskMemory+0x30>)
 8002692:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2280      	movs	r2, #128	; 0x80
 8002698:	601a      	str	r2, [r3, #0]
}
 800269a:	bf00      	nop
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	2000009c 	.word	0x2000009c
 80026ac:	20000158 	.word	0x20000158

080026b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4a07      	ldr	r2, [pc, #28]	; (80026dc <vApplicationGetTimerTaskMemory+0x2c>)
 80026c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	4a06      	ldr	r2, [pc, #24]	; (80026e0 <vApplicationGetTimerTaskMemory+0x30>)
 80026c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026ce:	601a      	str	r2, [r3, #0]
}
 80026d0:	bf00      	nop
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	20000358 	.word	0x20000358
 80026e0:	20000414 	.word	0x20000414

080026e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f103 0208 	add.w	r2, r3, #8
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f04f 32ff 	mov.w	r2, #4294967295
 80026fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f103 0208 	add.w	r2, r3, #8
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f103 0208 	add.w	r2, r3, #8
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800273e:	b480      	push	{r7}
 8002740:	b085      	sub	sp, #20
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
 8002746:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	1c5a      	adds	r2, r3, #1
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	601a      	str	r2, [r3, #0]
}
 800277a:	bf00      	nop
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002786:	b480      	push	{r7}
 8002788:	b085      	sub	sp, #20
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
 800278e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800279c:	d103      	bne.n	80027a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	e00c      	b.n	80027c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	3308      	adds	r3, #8
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	e002      	b.n	80027b4 <vListInsert+0x2e>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68ba      	ldr	r2, [r7, #8]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d2f6      	bcs.n	80027ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	1c5a      	adds	r2, r3, #1
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	601a      	str	r2, [r3, #0]
}
 80027ec:	bf00      	nop
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6892      	ldr	r2, [r2, #8]
 800280e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6852      	ldr	r2, [r2, #4]
 8002818:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	429a      	cmp	r2, r3
 8002822:	d103      	bne.n	800282c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	1e5a      	subs	r2, r3, #1
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10a      	bne.n	8002876 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002864:	f383 8811 	msr	BASEPRI, r3
 8002868:	f3bf 8f6f 	isb	sy
 800286c:	f3bf 8f4f 	dsb	sy
 8002870:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002872:	bf00      	nop
 8002874:	e7fe      	b.n	8002874 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002876:	f002 f875 	bl	8004964 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002882:	68f9      	ldr	r1, [r7, #12]
 8002884:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002886:	fb01 f303 	mul.w	r3, r1, r3
 800288a:	441a      	add	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a6:	3b01      	subs	r3, #1
 80028a8:	68f9      	ldr	r1, [r7, #12]
 80028aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80028ac:	fb01 f303 	mul.w	r3, r1, r3
 80028b0:	441a      	add	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	22ff      	movs	r2, #255	; 0xff
 80028ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	22ff      	movs	r2, #255	; 0xff
 80028c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d114      	bne.n	80028f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d01a      	beq.n	800290a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	3310      	adds	r3, #16
 80028d8:	4618      	mov	r0, r3
 80028da:	f001 f929 	bl	8003b30 <xTaskRemoveFromEventList>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d012      	beq.n	800290a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80028e4:	4b0c      	ldr	r3, [pc, #48]	; (8002918 <xQueueGenericReset+0xcc>)
 80028e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	f3bf 8f4f 	dsb	sy
 80028f0:	f3bf 8f6f 	isb	sy
 80028f4:	e009      	b.n	800290a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	3310      	adds	r3, #16
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff fef2 	bl	80026e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	3324      	adds	r3, #36	; 0x24
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff feed 	bl	80026e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800290a:	f002 f85b 	bl	80049c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800290e:	2301      	movs	r3, #1
}
 8002910:	4618      	mov	r0, r3
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	e000ed04 	.word	0xe000ed04

0800291c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08e      	sub	sp, #56	; 0x38
 8002920:	af02      	add	r7, sp, #8
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
 8002928:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10a      	bne.n	8002946 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002934:	f383 8811 	msr	BASEPRI, r3
 8002938:	f3bf 8f6f 	isb	sy
 800293c:	f3bf 8f4f 	dsb	sy
 8002940:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002942:	bf00      	nop
 8002944:	e7fe      	b.n	8002944 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10a      	bne.n	8002962 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800294c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002950:	f383 8811 	msr	BASEPRI, r3
 8002954:	f3bf 8f6f 	isb	sy
 8002958:	f3bf 8f4f 	dsb	sy
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800295e:	bf00      	nop
 8002960:	e7fe      	b.n	8002960 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d002      	beq.n	800296e <xQueueGenericCreateStatic+0x52>
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <xQueueGenericCreateStatic+0x56>
 800296e:	2301      	movs	r3, #1
 8002970:	e000      	b.n	8002974 <xQueueGenericCreateStatic+0x58>
 8002972:	2300      	movs	r3, #0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10a      	bne.n	800298e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800297c:	f383 8811 	msr	BASEPRI, r3
 8002980:	f3bf 8f6f 	isb	sy
 8002984:	f3bf 8f4f 	dsb	sy
 8002988:	623b      	str	r3, [r7, #32]
}
 800298a:	bf00      	nop
 800298c:	e7fe      	b.n	800298c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d102      	bne.n	800299a <xQueueGenericCreateStatic+0x7e>
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <xQueueGenericCreateStatic+0x82>
 800299a:	2301      	movs	r3, #1
 800299c:	e000      	b.n	80029a0 <xQueueGenericCreateStatic+0x84>
 800299e:	2300      	movs	r3, #0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d10a      	bne.n	80029ba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80029a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a8:	f383 8811 	msr	BASEPRI, r3
 80029ac:	f3bf 8f6f 	isb	sy
 80029b0:	f3bf 8f4f 	dsb	sy
 80029b4:	61fb      	str	r3, [r7, #28]
}
 80029b6:	bf00      	nop
 80029b8:	e7fe      	b.n	80029b8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80029ba:	2350      	movs	r3, #80	; 0x50
 80029bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	2b50      	cmp	r3, #80	; 0x50
 80029c2:	d00a      	beq.n	80029da <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80029c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c8:	f383 8811 	msr	BASEPRI, r3
 80029cc:	f3bf 8f6f 	isb	sy
 80029d0:	f3bf 8f4f 	dsb	sy
 80029d4:	61bb      	str	r3, [r7, #24]
}
 80029d6:	bf00      	nop
 80029d8:	e7fe      	b.n	80029d8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80029da:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80029e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00d      	beq.n	8002a02 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80029e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80029ee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80029f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	4613      	mov	r3, r2
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	68b9      	ldr	r1, [r7, #8]
 80029fc:	68f8      	ldr	r0, [r7, #12]
 80029fe:	f000 f805 	bl	8002a0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3730      	adds	r7, #48	; 0x30
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
 8002a18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d103      	bne.n	8002a28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	e002      	b.n	8002a2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	69b8      	ldr	r0, [r7, #24]
 8002a3e:	f7ff ff05 	bl	800284c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	78fa      	ldrb	r2, [r7, #3]
 8002a46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002a4a:	bf00      	nop
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
	...

08002a54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b08e      	sub	sp, #56	; 0x38
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
 8002a60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002a62:	2300      	movs	r3, #0
 8002a64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10a      	bne.n	8002a86 <xQueueGenericSend+0x32>
	__asm volatile
 8002a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a74:	f383 8811 	msr	BASEPRI, r3
 8002a78:	f3bf 8f6f 	isb	sy
 8002a7c:	f3bf 8f4f 	dsb	sy
 8002a80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a82:	bf00      	nop
 8002a84:	e7fe      	b.n	8002a84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d103      	bne.n	8002a94 <xQueueGenericSend+0x40>
 8002a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <xQueueGenericSend+0x44>
 8002a94:	2301      	movs	r3, #1
 8002a96:	e000      	b.n	8002a9a <xQueueGenericSend+0x46>
 8002a98:	2300      	movs	r3, #0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10a      	bne.n	8002ab4 <xQueueGenericSend+0x60>
	__asm volatile
 8002a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa2:	f383 8811 	msr	BASEPRI, r3
 8002aa6:	f3bf 8f6f 	isb	sy
 8002aaa:	f3bf 8f4f 	dsb	sy
 8002aae:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002ab0:	bf00      	nop
 8002ab2:	e7fe      	b.n	8002ab2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d103      	bne.n	8002ac2 <xQueueGenericSend+0x6e>
 8002aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d101      	bne.n	8002ac6 <xQueueGenericSend+0x72>
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e000      	b.n	8002ac8 <xQueueGenericSend+0x74>
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d10a      	bne.n	8002ae2 <xQueueGenericSend+0x8e>
	__asm volatile
 8002acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad0:	f383 8811 	msr	BASEPRI, r3
 8002ad4:	f3bf 8f6f 	isb	sy
 8002ad8:	f3bf 8f4f 	dsb	sy
 8002adc:	623b      	str	r3, [r7, #32]
}
 8002ade:	bf00      	nop
 8002ae0:	e7fe      	b.n	8002ae0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ae2:	f001 f9e7 	bl	8003eb4 <xTaskGetSchedulerState>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d102      	bne.n	8002af2 <xQueueGenericSend+0x9e>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <xQueueGenericSend+0xa2>
 8002af2:	2301      	movs	r3, #1
 8002af4:	e000      	b.n	8002af8 <xQueueGenericSend+0xa4>
 8002af6:	2300      	movs	r3, #0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10a      	bne.n	8002b12 <xQueueGenericSend+0xbe>
	__asm volatile
 8002afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b00:	f383 8811 	msr	BASEPRI, r3
 8002b04:	f3bf 8f6f 	isb	sy
 8002b08:	f3bf 8f4f 	dsb	sy
 8002b0c:	61fb      	str	r3, [r7, #28]
}
 8002b0e:	bf00      	nop
 8002b10:	e7fe      	b.n	8002b10 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b12:	f001 ff27 	bl	8004964 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d302      	bcc.n	8002b28 <xQueueGenericSend+0xd4>
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d129      	bne.n	8002b7c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	68b9      	ldr	r1, [r7, #8]
 8002b2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b2e:	f000 fa0b 	bl	8002f48 <prvCopyDataToQueue>
 8002b32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d010      	beq.n	8002b5e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3e:	3324      	adds	r3, #36	; 0x24
 8002b40:	4618      	mov	r0, r3
 8002b42:	f000 fff5 	bl	8003b30 <xTaskRemoveFromEventList>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d013      	beq.n	8002b74 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002b4c:	4b3f      	ldr	r3, [pc, #252]	; (8002c4c <xQueueGenericSend+0x1f8>)
 8002b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	f3bf 8f4f 	dsb	sy
 8002b58:	f3bf 8f6f 	isb	sy
 8002b5c:	e00a      	b.n	8002b74 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d007      	beq.n	8002b74 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002b64:	4b39      	ldr	r3, [pc, #228]	; (8002c4c <xQueueGenericSend+0x1f8>)
 8002b66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	f3bf 8f4f 	dsb	sy
 8002b70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002b74:	f001 ff26 	bl	80049c4 <vPortExitCritical>
				return pdPASS;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e063      	b.n	8002c44 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d103      	bne.n	8002b8a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b82:	f001 ff1f 	bl	80049c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002b86:	2300      	movs	r3, #0
 8002b88:	e05c      	b.n	8002c44 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d106      	bne.n	8002b9e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b90:	f107 0314 	add.w	r3, r7, #20
 8002b94:	4618      	mov	r0, r3
 8002b96:	f001 f82f 	bl	8003bf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b9e:	f001 ff11 	bl	80049c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ba2:	f000 fd9b 	bl	80036dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ba6:	f001 fedd 	bl	8004964 <vPortEnterCritical>
 8002baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bb0:	b25b      	sxtb	r3, r3
 8002bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb6:	d103      	bne.n	8002bc0 <xQueueGenericSend+0x16c>
 8002bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bc6:	b25b      	sxtb	r3, r3
 8002bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bcc:	d103      	bne.n	8002bd6 <xQueueGenericSend+0x182>
 8002bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bd6:	f001 fef5 	bl	80049c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002bda:	1d3a      	adds	r2, r7, #4
 8002bdc:	f107 0314 	add.w	r3, r7, #20
 8002be0:	4611      	mov	r1, r2
 8002be2:	4618      	mov	r0, r3
 8002be4:	f001 f81e 	bl	8003c24 <xTaskCheckForTimeOut>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d124      	bne.n	8002c38 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002bee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bf0:	f000 faa2 	bl	8003138 <prvIsQueueFull>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d018      	beq.n	8002c2c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfc:	3310      	adds	r3, #16
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	4611      	mov	r1, r2
 8002c02:	4618      	mov	r0, r3
 8002c04:	f000 ff44 	bl	8003a90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002c08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c0a:	f000 fa2d 	bl	8003068 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002c0e:	f000 fd73 	bl	80036f8 <xTaskResumeAll>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f47f af7c 	bne.w	8002b12 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002c1a:	4b0c      	ldr	r3, [pc, #48]	; (8002c4c <xQueueGenericSend+0x1f8>)
 8002c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	f3bf 8f4f 	dsb	sy
 8002c26:	f3bf 8f6f 	isb	sy
 8002c2a:	e772      	b.n	8002b12 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002c2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c2e:	f000 fa1b 	bl	8003068 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c32:	f000 fd61 	bl	80036f8 <xTaskResumeAll>
 8002c36:	e76c      	b.n	8002b12 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002c38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c3a:	f000 fa15 	bl	8003068 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c3e:	f000 fd5b 	bl	80036f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002c42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3738      	adds	r7, #56	; 0x38
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	e000ed04 	.word	0xe000ed04

08002c50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b090      	sub	sp, #64	; 0x40
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
 8002c5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10a      	bne.n	8002c7e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c6c:	f383 8811 	msr	BASEPRI, r3
 8002c70:	f3bf 8f6f 	isb	sy
 8002c74:	f3bf 8f4f 	dsb	sy
 8002c78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c7a:	bf00      	nop
 8002c7c:	e7fe      	b.n	8002c7c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d103      	bne.n	8002c8c <xQueueGenericSendFromISR+0x3c>
 8002c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <xQueueGenericSendFromISR+0x40>
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e000      	b.n	8002c92 <xQueueGenericSendFromISR+0x42>
 8002c90:	2300      	movs	r3, #0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10a      	bne.n	8002cac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9a:	f383 8811 	msr	BASEPRI, r3
 8002c9e:	f3bf 8f6f 	isb	sy
 8002ca2:	f3bf 8f4f 	dsb	sy
 8002ca6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002ca8:	bf00      	nop
 8002caa:	e7fe      	b.n	8002caa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d103      	bne.n	8002cba <xQueueGenericSendFromISR+0x6a>
 8002cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d101      	bne.n	8002cbe <xQueueGenericSendFromISR+0x6e>
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e000      	b.n	8002cc0 <xQueueGenericSendFromISR+0x70>
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10a      	bne.n	8002cda <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc8:	f383 8811 	msr	BASEPRI, r3
 8002ccc:	f3bf 8f6f 	isb	sy
 8002cd0:	f3bf 8f4f 	dsb	sy
 8002cd4:	623b      	str	r3, [r7, #32]
}
 8002cd6:	bf00      	nop
 8002cd8:	e7fe      	b.n	8002cd8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002cda:	f001 ff25 	bl	8004b28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002cde:	f3ef 8211 	mrs	r2, BASEPRI
 8002ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce6:	f383 8811 	msr	BASEPRI, r3
 8002cea:	f3bf 8f6f 	isb	sy
 8002cee:	f3bf 8f4f 	dsb	sy
 8002cf2:	61fa      	str	r2, [r7, #28]
 8002cf4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002cf6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002cf8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d302      	bcc.n	8002d0c <xQueueGenericSendFromISR+0xbc>
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d12f      	bne.n	8002d6c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	68b9      	ldr	r1, [r7, #8]
 8002d20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002d22:	f000 f911 	bl	8002f48 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002d26:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d2e:	d112      	bne.n	8002d56 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d016      	beq.n	8002d66 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d3a:	3324      	adds	r3, #36	; 0x24
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f000 fef7 	bl	8003b30 <xTaskRemoveFromEventList>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00e      	beq.n	8002d66 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00b      	beq.n	8002d66 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	e007      	b.n	8002d66 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002d56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	b25a      	sxtb	r2, r3
 8002d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002d66:	2301      	movs	r3, #1
 8002d68:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002d6a:	e001      	b.n	8002d70 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d72:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002d7a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3740      	adds	r7, #64	; 0x40
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
	...

08002d88 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08c      	sub	sp, #48	; 0x30
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002d94:	2300      	movs	r3, #0
 8002d96:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10a      	bne.n	8002db8 <xQueueReceive+0x30>
	__asm volatile
 8002da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da6:	f383 8811 	msr	BASEPRI, r3
 8002daa:	f3bf 8f6f 	isb	sy
 8002dae:	f3bf 8f4f 	dsb	sy
 8002db2:	623b      	str	r3, [r7, #32]
}
 8002db4:	bf00      	nop
 8002db6:	e7fe      	b.n	8002db6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d103      	bne.n	8002dc6 <xQueueReceive+0x3e>
 8002dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <xQueueReceive+0x42>
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e000      	b.n	8002dcc <xQueueReceive+0x44>
 8002dca:	2300      	movs	r3, #0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10a      	bne.n	8002de6 <xQueueReceive+0x5e>
	__asm volatile
 8002dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd4:	f383 8811 	msr	BASEPRI, r3
 8002dd8:	f3bf 8f6f 	isb	sy
 8002ddc:	f3bf 8f4f 	dsb	sy
 8002de0:	61fb      	str	r3, [r7, #28]
}
 8002de2:	bf00      	nop
 8002de4:	e7fe      	b.n	8002de4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002de6:	f001 f865 	bl	8003eb4 <xTaskGetSchedulerState>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d102      	bne.n	8002df6 <xQueueReceive+0x6e>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <xQueueReceive+0x72>
 8002df6:	2301      	movs	r3, #1
 8002df8:	e000      	b.n	8002dfc <xQueueReceive+0x74>
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10a      	bne.n	8002e16 <xQueueReceive+0x8e>
	__asm volatile
 8002e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e04:	f383 8811 	msr	BASEPRI, r3
 8002e08:	f3bf 8f6f 	isb	sy
 8002e0c:	f3bf 8f4f 	dsb	sy
 8002e10:	61bb      	str	r3, [r7, #24]
}
 8002e12:	bf00      	nop
 8002e14:	e7fe      	b.n	8002e14 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e16:	f001 fda5 	bl	8004964 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d01f      	beq.n	8002e66 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e26:	68b9      	ldr	r1, [r7, #8]
 8002e28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e2a:	f000 f8f7 	bl	800301c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e30:	1e5a      	subs	r2, r3, #1
 8002e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e34:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00f      	beq.n	8002e5e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e40:	3310      	adds	r3, #16
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 fe74 	bl	8003b30 <xTaskRemoveFromEventList>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d007      	beq.n	8002e5e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002e4e:	4b3d      	ldr	r3, [pc, #244]	; (8002f44 <xQueueReceive+0x1bc>)
 8002e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	f3bf 8f4f 	dsb	sy
 8002e5a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002e5e:	f001 fdb1 	bl	80049c4 <vPortExitCritical>
				return pdPASS;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e069      	b.n	8002f3a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d103      	bne.n	8002e74 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e6c:	f001 fdaa 	bl	80049c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002e70:	2300      	movs	r3, #0
 8002e72:	e062      	b.n	8002f3a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d106      	bne.n	8002e88 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e7a:	f107 0310 	add.w	r3, r7, #16
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 feba 	bl	8003bf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e84:	2301      	movs	r3, #1
 8002e86:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e88:	f001 fd9c 	bl	80049c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e8c:	f000 fc26 	bl	80036dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e90:	f001 fd68 	bl	8004964 <vPortEnterCritical>
 8002e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e9a:	b25b      	sxtb	r3, r3
 8002e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea0:	d103      	bne.n	8002eaa <xQueueReceive+0x122>
 8002ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002eb0:	b25b      	sxtb	r3, r3
 8002eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb6:	d103      	bne.n	8002ec0 <xQueueReceive+0x138>
 8002eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ec0:	f001 fd80 	bl	80049c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ec4:	1d3a      	adds	r2, r7, #4
 8002ec6:	f107 0310 	add.w	r3, r7, #16
 8002eca:	4611      	mov	r1, r2
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f000 fea9 	bl	8003c24 <xTaskCheckForTimeOut>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d123      	bne.n	8002f20 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eda:	f000 f917 	bl	800310c <prvIsQueueEmpty>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d017      	beq.n	8002f14 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee6:	3324      	adds	r3, #36	; 0x24
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	4611      	mov	r1, r2
 8002eec:	4618      	mov	r0, r3
 8002eee:	f000 fdcf 	bl	8003a90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002ef2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ef4:	f000 f8b8 	bl	8003068 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002ef8:	f000 fbfe 	bl	80036f8 <xTaskResumeAll>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d189      	bne.n	8002e16 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002f02:	4b10      	ldr	r3, [pc, #64]	; (8002f44 <xQueueReceive+0x1bc>)
 8002f04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	f3bf 8f4f 	dsb	sy
 8002f0e:	f3bf 8f6f 	isb	sy
 8002f12:	e780      	b.n	8002e16 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002f14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f16:	f000 f8a7 	bl	8003068 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f1a:	f000 fbed 	bl	80036f8 <xTaskResumeAll>
 8002f1e:	e77a      	b.n	8002e16 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002f20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f22:	f000 f8a1 	bl	8003068 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f26:	f000 fbe7 	bl	80036f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f2c:	f000 f8ee 	bl	800310c <prvIsQueueEmpty>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f43f af6f 	beq.w	8002e16 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002f38:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3730      	adds	r7, #48	; 0x30
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	e000ed04 	.word	0xe000ed04

08002f48 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002f54:	2300      	movs	r3, #0
 8002f56:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10d      	bne.n	8002f82 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d14d      	bne.n	800300a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f000 ffbc 	bl	8003ef0 <xTaskPriorityDisinherit>
 8002f78:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	609a      	str	r2, [r3, #8]
 8002f80:	e043      	b.n	800300a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d119      	bne.n	8002fbc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6858      	ldr	r0, [r3, #4]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	461a      	mov	r2, r3
 8002f92:	68b9      	ldr	r1, [r7, #8]
 8002f94:	f002 f818 	bl	8004fc8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	441a      	add	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d32b      	bcc.n	800300a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	605a      	str	r2, [r3, #4]
 8002fba:	e026      	b.n	800300a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	68d8      	ldr	r0, [r3, #12]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	68b9      	ldr	r1, [r7, #8]
 8002fc8:	f001 fffe 	bl	8004fc8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	68da      	ldr	r2, [r3, #12]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd4:	425b      	negs	r3, r3
 8002fd6:	441a      	add	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d207      	bcs.n	8002ff8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff0:	425b      	negs	r3, r3
 8002ff2:	441a      	add	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d105      	bne.n	800300a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d002      	beq.n	800300a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	3b01      	subs	r3, #1
 8003008:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1c5a      	adds	r2, r3, #1
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003012:	697b      	ldr	r3, [r7, #20]
}
 8003014:	4618      	mov	r0, r3
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	2b00      	cmp	r3, #0
 800302c:	d018      	beq.n	8003060 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68da      	ldr	r2, [r3, #12]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	441a      	add	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	429a      	cmp	r2, r3
 8003046:	d303      	bcc.n	8003050 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68d9      	ldr	r1, [r3, #12]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003058:	461a      	mov	r2, r3
 800305a:	6838      	ldr	r0, [r7, #0]
 800305c:	f001 ffb4 	bl	8004fc8 <memcpy>
	}
}
 8003060:	bf00      	nop
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003070:	f001 fc78 	bl	8004964 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800307a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800307c:	e011      	b.n	80030a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	2b00      	cmp	r3, #0
 8003084:	d012      	beq.n	80030ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	3324      	adds	r3, #36	; 0x24
 800308a:	4618      	mov	r0, r3
 800308c:	f000 fd50 	bl	8003b30 <xTaskRemoveFromEventList>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003096:	f000 fe27 	bl	8003ce8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800309a:	7bfb      	ldrb	r3, [r7, #15]
 800309c:	3b01      	subs	r3, #1
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80030a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	dce9      	bgt.n	800307e <prvUnlockQueue+0x16>
 80030aa:	e000      	b.n	80030ae <prvUnlockQueue+0x46>
					break;
 80030ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	22ff      	movs	r2, #255	; 0xff
 80030b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80030b6:	f001 fc85 	bl	80049c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80030ba:	f001 fc53 	bl	8004964 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030c6:	e011      	b.n	80030ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d012      	beq.n	80030f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3310      	adds	r3, #16
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 fd2b 	bl	8003b30 <xTaskRemoveFromEventList>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80030e0:	f000 fe02 	bl	8003ce8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80030e4:	7bbb      	ldrb	r3, [r7, #14]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	dce9      	bgt.n	80030c8 <prvUnlockQueue+0x60>
 80030f4:	e000      	b.n	80030f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80030f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	22ff      	movs	r2, #255	; 0xff
 80030fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003100:	f001 fc60 	bl	80049c4 <vPortExitCritical>
}
 8003104:	bf00      	nop
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003114:	f001 fc26 	bl	8004964 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311c:	2b00      	cmp	r3, #0
 800311e:	d102      	bne.n	8003126 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003120:	2301      	movs	r3, #1
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	e001      	b.n	800312a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003126:	2300      	movs	r3, #0
 8003128:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800312a:	f001 fc4b 	bl	80049c4 <vPortExitCritical>

	return xReturn;
 800312e:	68fb      	ldr	r3, [r7, #12]
}
 8003130:	4618      	mov	r0, r3
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003140:	f001 fc10 	bl	8004964 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314c:	429a      	cmp	r2, r3
 800314e:	d102      	bne.n	8003156 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003150:	2301      	movs	r3, #1
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	e001      	b.n	800315a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003156:	2300      	movs	r3, #0
 8003158:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800315a:	f001 fc33 	bl	80049c4 <vPortExitCritical>

	return xReturn;
 800315e:	68fb      	ldr	r3, [r7, #12]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003172:	2300      	movs	r3, #0
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	e014      	b.n	80031a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003178:	4a0f      	ldr	r2, [pc, #60]	; (80031b8 <vQueueAddToRegistry+0x50>)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10b      	bne.n	800319c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003184:	490c      	ldr	r1, [pc, #48]	; (80031b8 <vQueueAddToRegistry+0x50>)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800318e:	4a0a      	ldr	r2, [pc, #40]	; (80031b8 <vQueueAddToRegistry+0x50>)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	4413      	add	r3, r2
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800319a:	e006      	b.n	80031aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	3301      	adds	r3, #1
 80031a0:	60fb      	str	r3, [r7, #12]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2b07      	cmp	r3, #7
 80031a6:	d9e7      	bls.n	8003178 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80031a8:	bf00      	nop
 80031aa:	bf00      	nop
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	20004b08 	.word	0x20004b08

080031bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80031cc:	f001 fbca 	bl	8004964 <vPortEnterCritical>
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031d6:	b25b      	sxtb	r3, r3
 80031d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031dc:	d103      	bne.n	80031e6 <vQueueWaitForMessageRestricted+0x2a>
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031ec:	b25b      	sxtb	r3, r3
 80031ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f2:	d103      	bne.n	80031fc <vQueueWaitForMessageRestricted+0x40>
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031fc:	f001 fbe2 	bl	80049c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003204:	2b00      	cmp	r3, #0
 8003206:	d106      	bne.n	8003216 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	3324      	adds	r3, #36	; 0x24
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	68b9      	ldr	r1, [r7, #8]
 8003210:	4618      	mov	r0, r3
 8003212:	f000 fc61 	bl	8003ad8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003216:	6978      	ldr	r0, [r7, #20]
 8003218:	f7ff ff26 	bl	8003068 <prvUnlockQueue>
	}
 800321c:	bf00      	nop
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003224:	b580      	push	{r7, lr}
 8003226:	b08e      	sub	sp, #56	; 0x38
 8003228:	af04      	add	r7, sp, #16
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
 8003230:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10a      	bne.n	800324e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800323c:	f383 8811 	msr	BASEPRI, r3
 8003240:	f3bf 8f6f 	isb	sy
 8003244:	f3bf 8f4f 	dsb	sy
 8003248:	623b      	str	r3, [r7, #32]
}
 800324a:	bf00      	nop
 800324c:	e7fe      	b.n	800324c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800324e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10a      	bne.n	800326a <xTaskCreateStatic+0x46>
	__asm volatile
 8003254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003258:	f383 8811 	msr	BASEPRI, r3
 800325c:	f3bf 8f6f 	isb	sy
 8003260:	f3bf 8f4f 	dsb	sy
 8003264:	61fb      	str	r3, [r7, #28]
}
 8003266:	bf00      	nop
 8003268:	e7fe      	b.n	8003268 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800326a:	23bc      	movs	r3, #188	; 0xbc
 800326c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	2bbc      	cmp	r3, #188	; 0xbc
 8003272:	d00a      	beq.n	800328a <xTaskCreateStatic+0x66>
	__asm volatile
 8003274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003278:	f383 8811 	msr	BASEPRI, r3
 800327c:	f3bf 8f6f 	isb	sy
 8003280:	f3bf 8f4f 	dsb	sy
 8003284:	61bb      	str	r3, [r7, #24]
}
 8003286:	bf00      	nop
 8003288:	e7fe      	b.n	8003288 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800328a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800328c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800328e:	2b00      	cmp	r3, #0
 8003290:	d01e      	beq.n	80032d0 <xTaskCreateStatic+0xac>
 8003292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003294:	2b00      	cmp	r3, #0
 8003296:	d01b      	beq.n	80032d0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800329a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	2202      	movs	r2, #2
 80032a6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80032aa:	2300      	movs	r3, #0
 80032ac:	9303      	str	r3, [sp, #12]
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	9302      	str	r3, [sp, #8]
 80032b2:	f107 0314 	add.w	r3, r7, #20
 80032b6:	9301      	str	r3, [sp, #4]
 80032b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	68b9      	ldr	r1, [r7, #8]
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 f850 	bl	8003368 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032ca:	f000 f8f3 	bl	80034b4 <prvAddNewTaskToReadyList>
 80032ce:	e001      	b.n	80032d4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80032d0:	2300      	movs	r3, #0
 80032d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80032d4:	697b      	ldr	r3, [r7, #20]
	}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3728      	adds	r7, #40	; 0x28
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b08c      	sub	sp, #48	; 0x30
 80032e2:	af04      	add	r7, sp, #16
 80032e4:	60f8      	str	r0, [r7, #12]
 80032e6:	60b9      	str	r1, [r7, #8]
 80032e8:	603b      	str	r3, [r7, #0]
 80032ea:	4613      	mov	r3, r2
 80032ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80032ee:	88fb      	ldrh	r3, [r7, #6]
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4618      	mov	r0, r3
 80032f4:	f001 fc58 	bl	8004ba8 <pvPortMalloc>
 80032f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00e      	beq.n	800331e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003300:	20bc      	movs	r0, #188	; 0xbc
 8003302:	f001 fc51 	bl	8004ba8 <pvPortMalloc>
 8003306:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	631a      	str	r2, [r3, #48]	; 0x30
 8003314:	e005      	b.n	8003322 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003316:	6978      	ldr	r0, [r7, #20]
 8003318:	f001 fd12 	bl	8004d40 <vPortFree>
 800331c:	e001      	b.n	8003322 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800331e:	2300      	movs	r3, #0
 8003320:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d017      	beq.n	8003358 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003330:	88fa      	ldrh	r2, [r7, #6]
 8003332:	2300      	movs	r3, #0
 8003334:	9303      	str	r3, [sp, #12]
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	9302      	str	r3, [sp, #8]
 800333a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333c:	9301      	str	r3, [sp, #4]
 800333e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003340:	9300      	str	r3, [sp, #0]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	68b9      	ldr	r1, [r7, #8]
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 f80e 	bl	8003368 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800334c:	69f8      	ldr	r0, [r7, #28]
 800334e:	f000 f8b1 	bl	80034b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003352:	2301      	movs	r3, #1
 8003354:	61bb      	str	r3, [r7, #24]
 8003356:	e002      	b.n	800335e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003358:	f04f 33ff 	mov.w	r3, #4294967295
 800335c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800335e:	69bb      	ldr	r3, [r7, #24]
	}
 8003360:	4618      	mov	r0, r3
 8003362:	3720      	adds	r7, #32
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b088      	sub	sp, #32
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
 8003374:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003378:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	461a      	mov	r2, r3
 8003380:	21a5      	movs	r1, #165	; 0xa5
 8003382:	f001 fe2f 	bl	8004fe4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003388:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003390:	3b01      	subs	r3, #1
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4413      	add	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	f023 0307 	bic.w	r3, r3, #7
 800339e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00a      	beq.n	80033c0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80033aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ae:	f383 8811 	msr	BASEPRI, r3
 80033b2:	f3bf 8f6f 	isb	sy
 80033b6:	f3bf 8f4f 	dsb	sy
 80033ba:	617b      	str	r3, [r7, #20]
}
 80033bc:	bf00      	nop
 80033be:	e7fe      	b.n	80033be <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d01f      	beq.n	8003406 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033c6:	2300      	movs	r3, #0
 80033c8:	61fb      	str	r3, [r7, #28]
 80033ca:	e012      	b.n	80033f2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80033cc:	68ba      	ldr	r2, [r7, #8]
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	4413      	add	r3, r2
 80033d2:	7819      	ldrb	r1, [r3, #0]
 80033d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	4413      	add	r3, r2
 80033da:	3334      	adds	r3, #52	; 0x34
 80033dc:	460a      	mov	r2, r1
 80033de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	4413      	add	r3, r2
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d006      	beq.n	80033fa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	3301      	adds	r3, #1
 80033f0:	61fb      	str	r3, [r7, #28]
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	2b0f      	cmp	r3, #15
 80033f6:	d9e9      	bls.n	80033cc <prvInitialiseNewTask+0x64>
 80033f8:	e000      	b.n	80033fc <prvInitialiseNewTask+0x94>
			{
				break;
 80033fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80033fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003404:	e003      	b.n	800340e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800340e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003410:	2b37      	cmp	r3, #55	; 0x37
 8003412:	d901      	bls.n	8003418 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003414:	2337      	movs	r3, #55	; 0x37
 8003416:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800341c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800341e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003420:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003422:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003426:	2200      	movs	r2, #0
 8003428:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800342a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342c:	3304      	adds	r3, #4
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff f978 	bl	8002724 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003436:	3318      	adds	r3, #24
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff f973 	bl	8002724 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800343e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003442:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003446:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800344a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800344e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003452:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003456:	2200      	movs	r2, #0
 8003458:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800345c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345e:	2200      	movs	r2, #0
 8003460:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003466:	3354      	adds	r3, #84	; 0x54
 8003468:	2260      	movs	r2, #96	; 0x60
 800346a:	2100      	movs	r1, #0
 800346c:	4618      	mov	r0, r3
 800346e:	f001 fdb9 	bl	8004fe4 <memset>
 8003472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003474:	4a0c      	ldr	r2, [pc, #48]	; (80034a8 <prvInitialiseNewTask+0x140>)
 8003476:	659a      	str	r2, [r3, #88]	; 0x58
 8003478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347a:	4a0c      	ldr	r2, [pc, #48]	; (80034ac <prvInitialiseNewTask+0x144>)
 800347c:	65da      	str	r2, [r3, #92]	; 0x5c
 800347e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003480:	4a0b      	ldr	r2, [pc, #44]	; (80034b0 <prvInitialiseNewTask+0x148>)
 8003482:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	68f9      	ldr	r1, [r7, #12]
 8003488:	69b8      	ldr	r0, [r7, #24]
 800348a:	f001 f941 	bl	8004710 <pxPortInitialiseStack>
 800348e:	4602      	mov	r2, r0
 8003490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003492:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003496:	2b00      	cmp	r3, #0
 8003498:	d002      	beq.n	80034a0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800349a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800349e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034a0:	bf00      	nop
 80034a2:	3720      	adds	r7, #32
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	08005278 	.word	0x08005278
 80034ac:	08005298 	.word	0x08005298
 80034b0:	08005258 	.word	0x08005258

080034b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80034bc:	f001 fa52 	bl	8004964 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80034c0:	4b2d      	ldr	r3, [pc, #180]	; (8003578 <prvAddNewTaskToReadyList+0xc4>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	3301      	adds	r3, #1
 80034c6:	4a2c      	ldr	r2, [pc, #176]	; (8003578 <prvAddNewTaskToReadyList+0xc4>)
 80034c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80034ca:	4b2c      	ldr	r3, [pc, #176]	; (800357c <prvAddNewTaskToReadyList+0xc8>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d109      	bne.n	80034e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80034d2:	4a2a      	ldr	r2, [pc, #168]	; (800357c <prvAddNewTaskToReadyList+0xc8>)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80034d8:	4b27      	ldr	r3, [pc, #156]	; (8003578 <prvAddNewTaskToReadyList+0xc4>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d110      	bne.n	8003502 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80034e0:	f000 fc26 	bl	8003d30 <prvInitialiseTaskLists>
 80034e4:	e00d      	b.n	8003502 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80034e6:	4b26      	ldr	r3, [pc, #152]	; (8003580 <prvAddNewTaskToReadyList+0xcc>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d109      	bne.n	8003502 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80034ee:	4b23      	ldr	r3, [pc, #140]	; (800357c <prvAddNewTaskToReadyList+0xc8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d802      	bhi.n	8003502 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80034fc:	4a1f      	ldr	r2, [pc, #124]	; (800357c <prvAddNewTaskToReadyList+0xc8>)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003502:	4b20      	ldr	r3, [pc, #128]	; (8003584 <prvAddNewTaskToReadyList+0xd0>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	3301      	adds	r3, #1
 8003508:	4a1e      	ldr	r2, [pc, #120]	; (8003584 <prvAddNewTaskToReadyList+0xd0>)
 800350a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800350c:	4b1d      	ldr	r3, [pc, #116]	; (8003584 <prvAddNewTaskToReadyList+0xd0>)
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003518:	4b1b      	ldr	r3, [pc, #108]	; (8003588 <prvAddNewTaskToReadyList+0xd4>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	429a      	cmp	r2, r3
 800351e:	d903      	bls.n	8003528 <prvAddNewTaskToReadyList+0x74>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003524:	4a18      	ldr	r2, [pc, #96]	; (8003588 <prvAddNewTaskToReadyList+0xd4>)
 8003526:	6013      	str	r3, [r2, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800352c:	4613      	mov	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4a15      	ldr	r2, [pc, #84]	; (800358c <prvAddNewTaskToReadyList+0xd8>)
 8003536:	441a      	add	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	3304      	adds	r3, #4
 800353c:	4619      	mov	r1, r3
 800353e:	4610      	mov	r0, r2
 8003540:	f7ff f8fd 	bl	800273e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003544:	f001 fa3e 	bl	80049c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003548:	4b0d      	ldr	r3, [pc, #52]	; (8003580 <prvAddNewTaskToReadyList+0xcc>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00e      	beq.n	800356e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003550:	4b0a      	ldr	r3, [pc, #40]	; (800357c <prvAddNewTaskToReadyList+0xc8>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355a:	429a      	cmp	r2, r3
 800355c:	d207      	bcs.n	800356e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800355e:	4b0c      	ldr	r3, [pc, #48]	; (8003590 <prvAddNewTaskToReadyList+0xdc>)
 8003560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	f3bf 8f4f 	dsb	sy
 800356a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800356e:	bf00      	nop
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	20000ce8 	.word	0x20000ce8
 800357c:	20000814 	.word	0x20000814
 8003580:	20000cf4 	.word	0x20000cf4
 8003584:	20000d04 	.word	0x20000d04
 8003588:	20000cf0 	.word	0x20000cf0
 800358c:	20000818 	.word	0x20000818
 8003590:	e000ed04 	.word	0xe000ed04

08003594 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800359c:	2300      	movs	r3, #0
 800359e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d017      	beq.n	80035d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80035a6:	4b13      	ldr	r3, [pc, #76]	; (80035f4 <vTaskDelay+0x60>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00a      	beq.n	80035c4 <vTaskDelay+0x30>
	__asm volatile
 80035ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b2:	f383 8811 	msr	BASEPRI, r3
 80035b6:	f3bf 8f6f 	isb	sy
 80035ba:	f3bf 8f4f 	dsb	sy
 80035be:	60bb      	str	r3, [r7, #8]
}
 80035c0:	bf00      	nop
 80035c2:	e7fe      	b.n	80035c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80035c4:	f000 f88a 	bl	80036dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80035c8:	2100      	movs	r1, #0
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 fcfe 	bl	8003fcc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80035d0:	f000 f892 	bl	80036f8 <xTaskResumeAll>
 80035d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d107      	bne.n	80035ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80035dc:	4b06      	ldr	r3, [pc, #24]	; (80035f8 <vTaskDelay+0x64>)
 80035de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	f3bf 8f4f 	dsb	sy
 80035e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80035ec:	bf00      	nop
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	20000d10 	.word	0x20000d10
 80035f8:	e000ed04 	.word	0xe000ed04

080035fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b08a      	sub	sp, #40	; 0x28
 8003600:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003602:	2300      	movs	r3, #0
 8003604:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003606:	2300      	movs	r3, #0
 8003608:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800360a:	463a      	mov	r2, r7
 800360c:	1d39      	adds	r1, r7, #4
 800360e:	f107 0308 	add.w	r3, r7, #8
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff f832 	bl	800267c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003618:	6839      	ldr	r1, [r7, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	9202      	str	r2, [sp, #8]
 8003620:	9301      	str	r3, [sp, #4]
 8003622:	2300      	movs	r3, #0
 8003624:	9300      	str	r3, [sp, #0]
 8003626:	2300      	movs	r3, #0
 8003628:	460a      	mov	r2, r1
 800362a:	4924      	ldr	r1, [pc, #144]	; (80036bc <vTaskStartScheduler+0xc0>)
 800362c:	4824      	ldr	r0, [pc, #144]	; (80036c0 <vTaskStartScheduler+0xc4>)
 800362e:	f7ff fdf9 	bl	8003224 <xTaskCreateStatic>
 8003632:	4603      	mov	r3, r0
 8003634:	4a23      	ldr	r2, [pc, #140]	; (80036c4 <vTaskStartScheduler+0xc8>)
 8003636:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003638:	4b22      	ldr	r3, [pc, #136]	; (80036c4 <vTaskStartScheduler+0xc8>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d002      	beq.n	8003646 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003640:	2301      	movs	r3, #1
 8003642:	617b      	str	r3, [r7, #20]
 8003644:	e001      	b.n	800364a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003646:	2300      	movs	r3, #0
 8003648:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d102      	bne.n	8003656 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003650:	f000 fd10 	bl	8004074 <xTimerCreateTimerTask>
 8003654:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d11b      	bne.n	8003694 <vTaskStartScheduler+0x98>
	__asm volatile
 800365c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003660:	f383 8811 	msr	BASEPRI, r3
 8003664:	f3bf 8f6f 	isb	sy
 8003668:	f3bf 8f4f 	dsb	sy
 800366c:	613b      	str	r3, [r7, #16]
}
 800366e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003670:	4b15      	ldr	r3, [pc, #84]	; (80036c8 <vTaskStartScheduler+0xcc>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	3354      	adds	r3, #84	; 0x54
 8003676:	4a15      	ldr	r2, [pc, #84]	; (80036cc <vTaskStartScheduler+0xd0>)
 8003678:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800367a:	4b15      	ldr	r3, [pc, #84]	; (80036d0 <vTaskStartScheduler+0xd4>)
 800367c:	f04f 32ff 	mov.w	r2, #4294967295
 8003680:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003682:	4b14      	ldr	r3, [pc, #80]	; (80036d4 <vTaskStartScheduler+0xd8>)
 8003684:	2201      	movs	r2, #1
 8003686:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003688:	4b13      	ldr	r3, [pc, #76]	; (80036d8 <vTaskStartScheduler+0xdc>)
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800368e:	f001 f8c7 	bl	8004820 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003692:	e00e      	b.n	80036b2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369a:	d10a      	bne.n	80036b2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800369c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a0:	f383 8811 	msr	BASEPRI, r3
 80036a4:	f3bf 8f6f 	isb	sy
 80036a8:	f3bf 8f4f 	dsb	sy
 80036ac:	60fb      	str	r3, [r7, #12]
}
 80036ae:	bf00      	nop
 80036b0:	e7fe      	b.n	80036b0 <vTaskStartScheduler+0xb4>
}
 80036b2:	bf00      	nop
 80036b4:	3718      	adds	r7, #24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	080051bc 	.word	0x080051bc
 80036c0:	08003d01 	.word	0x08003d01
 80036c4:	20000d0c 	.word	0x20000d0c
 80036c8:	20000814 	.word	0x20000814
 80036cc:	20000014 	.word	0x20000014
 80036d0:	20000d08 	.word	0x20000d08
 80036d4:	20000cf4 	.word	0x20000cf4
 80036d8:	20000cec 	.word	0x20000cec

080036dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80036e0:	4b04      	ldr	r3, [pc, #16]	; (80036f4 <vTaskSuspendAll+0x18>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	3301      	adds	r3, #1
 80036e6:	4a03      	ldr	r2, [pc, #12]	; (80036f4 <vTaskSuspendAll+0x18>)
 80036e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80036ea:	bf00      	nop
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	20000d10 	.word	0x20000d10

080036f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80036fe:	2300      	movs	r3, #0
 8003700:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003702:	2300      	movs	r3, #0
 8003704:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003706:	4b42      	ldr	r3, [pc, #264]	; (8003810 <xTaskResumeAll+0x118>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10a      	bne.n	8003724 <xTaskResumeAll+0x2c>
	__asm volatile
 800370e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003712:	f383 8811 	msr	BASEPRI, r3
 8003716:	f3bf 8f6f 	isb	sy
 800371a:	f3bf 8f4f 	dsb	sy
 800371e:	603b      	str	r3, [r7, #0]
}
 8003720:	bf00      	nop
 8003722:	e7fe      	b.n	8003722 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003724:	f001 f91e 	bl	8004964 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003728:	4b39      	ldr	r3, [pc, #228]	; (8003810 <xTaskResumeAll+0x118>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	3b01      	subs	r3, #1
 800372e:	4a38      	ldr	r2, [pc, #224]	; (8003810 <xTaskResumeAll+0x118>)
 8003730:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003732:	4b37      	ldr	r3, [pc, #220]	; (8003810 <xTaskResumeAll+0x118>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d162      	bne.n	8003800 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800373a:	4b36      	ldr	r3, [pc, #216]	; (8003814 <xTaskResumeAll+0x11c>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d05e      	beq.n	8003800 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003742:	e02f      	b.n	80037a4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003744:	4b34      	ldr	r3, [pc, #208]	; (8003818 <xTaskResumeAll+0x120>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	3318      	adds	r3, #24
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff f851 	bl	80027f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	3304      	adds	r3, #4
 800375a:	4618      	mov	r0, r3
 800375c:	f7ff f84c 	bl	80027f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003764:	4b2d      	ldr	r3, [pc, #180]	; (800381c <xTaskResumeAll+0x124>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	429a      	cmp	r2, r3
 800376a:	d903      	bls.n	8003774 <xTaskResumeAll+0x7c>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003770:	4a2a      	ldr	r2, [pc, #168]	; (800381c <xTaskResumeAll+0x124>)
 8003772:	6013      	str	r3, [r2, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003778:	4613      	mov	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4413      	add	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4a27      	ldr	r2, [pc, #156]	; (8003820 <xTaskResumeAll+0x128>)
 8003782:	441a      	add	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	3304      	adds	r3, #4
 8003788:	4619      	mov	r1, r3
 800378a:	4610      	mov	r0, r2
 800378c:	f7fe ffd7 	bl	800273e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003794:	4b23      	ldr	r3, [pc, #140]	; (8003824 <xTaskResumeAll+0x12c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379a:	429a      	cmp	r2, r3
 800379c:	d302      	bcc.n	80037a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800379e:	4b22      	ldr	r3, [pc, #136]	; (8003828 <xTaskResumeAll+0x130>)
 80037a0:	2201      	movs	r2, #1
 80037a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037a4:	4b1c      	ldr	r3, [pc, #112]	; (8003818 <xTaskResumeAll+0x120>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1cb      	bne.n	8003744 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80037b2:	f000 fb5f 	bl	8003e74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80037b6:	4b1d      	ldr	r3, [pc, #116]	; (800382c <xTaskResumeAll+0x134>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d010      	beq.n	80037e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80037c2:	f000 f847 	bl	8003854 <xTaskIncrementTick>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d002      	beq.n	80037d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80037cc:	4b16      	ldr	r3, [pc, #88]	; (8003828 <xTaskResumeAll+0x130>)
 80037ce:	2201      	movs	r2, #1
 80037d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	3b01      	subs	r3, #1
 80037d6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1f1      	bne.n	80037c2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80037de:	4b13      	ldr	r3, [pc, #76]	; (800382c <xTaskResumeAll+0x134>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80037e4:	4b10      	ldr	r3, [pc, #64]	; (8003828 <xTaskResumeAll+0x130>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d009      	beq.n	8003800 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80037ec:	2301      	movs	r3, #1
 80037ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80037f0:	4b0f      	ldr	r3, [pc, #60]	; (8003830 <xTaskResumeAll+0x138>)
 80037f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	f3bf 8f4f 	dsb	sy
 80037fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003800:	f001 f8e0 	bl	80049c4 <vPortExitCritical>

	return xAlreadyYielded;
 8003804:	68bb      	ldr	r3, [r7, #8]
}
 8003806:	4618      	mov	r0, r3
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	20000d10 	.word	0x20000d10
 8003814:	20000ce8 	.word	0x20000ce8
 8003818:	20000ca8 	.word	0x20000ca8
 800381c:	20000cf0 	.word	0x20000cf0
 8003820:	20000818 	.word	0x20000818
 8003824:	20000814 	.word	0x20000814
 8003828:	20000cfc 	.word	0x20000cfc
 800382c:	20000cf8 	.word	0x20000cf8
 8003830:	e000ed04 	.word	0xe000ed04

08003834 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800383a:	4b05      	ldr	r3, [pc, #20]	; (8003850 <xTaskGetTickCount+0x1c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003840:	687b      	ldr	r3, [r7, #4]
}
 8003842:	4618      	mov	r0, r3
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	20000cec 	.word	0x20000cec

08003854 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800385a:	2300      	movs	r3, #0
 800385c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800385e:	4b4f      	ldr	r3, [pc, #316]	; (800399c <xTaskIncrementTick+0x148>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	f040 808f 	bne.w	8003986 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003868:	4b4d      	ldr	r3, [pc, #308]	; (80039a0 <xTaskIncrementTick+0x14c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	3301      	adds	r3, #1
 800386e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003870:	4a4b      	ldr	r2, [pc, #300]	; (80039a0 <xTaskIncrementTick+0x14c>)
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d120      	bne.n	80038be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800387c:	4b49      	ldr	r3, [pc, #292]	; (80039a4 <xTaskIncrementTick+0x150>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00a      	beq.n	800389c <xTaskIncrementTick+0x48>
	__asm volatile
 8003886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388a:	f383 8811 	msr	BASEPRI, r3
 800388e:	f3bf 8f6f 	isb	sy
 8003892:	f3bf 8f4f 	dsb	sy
 8003896:	603b      	str	r3, [r7, #0]
}
 8003898:	bf00      	nop
 800389a:	e7fe      	b.n	800389a <xTaskIncrementTick+0x46>
 800389c:	4b41      	ldr	r3, [pc, #260]	; (80039a4 <xTaskIncrementTick+0x150>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	4b41      	ldr	r3, [pc, #260]	; (80039a8 <xTaskIncrementTick+0x154>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a3f      	ldr	r2, [pc, #252]	; (80039a4 <xTaskIncrementTick+0x150>)
 80038a8:	6013      	str	r3, [r2, #0]
 80038aa:	4a3f      	ldr	r2, [pc, #252]	; (80039a8 <xTaskIncrementTick+0x154>)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6013      	str	r3, [r2, #0]
 80038b0:	4b3e      	ldr	r3, [pc, #248]	; (80039ac <xTaskIncrementTick+0x158>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	3301      	adds	r3, #1
 80038b6:	4a3d      	ldr	r2, [pc, #244]	; (80039ac <xTaskIncrementTick+0x158>)
 80038b8:	6013      	str	r3, [r2, #0]
 80038ba:	f000 fadb 	bl	8003e74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80038be:	4b3c      	ldr	r3, [pc, #240]	; (80039b0 <xTaskIncrementTick+0x15c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d349      	bcc.n	800395c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038c8:	4b36      	ldr	r3, [pc, #216]	; (80039a4 <xTaskIncrementTick+0x150>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d104      	bne.n	80038dc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038d2:	4b37      	ldr	r3, [pc, #220]	; (80039b0 <xTaskIncrementTick+0x15c>)
 80038d4:	f04f 32ff 	mov.w	r2, #4294967295
 80038d8:	601a      	str	r2, [r3, #0]
					break;
 80038da:	e03f      	b.n	800395c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038dc:	4b31      	ldr	r3, [pc, #196]	; (80039a4 <xTaskIncrementTick+0x150>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d203      	bcs.n	80038fc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80038f4:	4a2e      	ldr	r2, [pc, #184]	; (80039b0 <xTaskIncrementTick+0x15c>)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80038fa:	e02f      	b.n	800395c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	3304      	adds	r3, #4
 8003900:	4618      	mov	r0, r3
 8003902:	f7fe ff79 	bl	80027f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390a:	2b00      	cmp	r3, #0
 800390c:	d004      	beq.n	8003918 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	3318      	adds	r3, #24
 8003912:	4618      	mov	r0, r3
 8003914:	f7fe ff70 	bl	80027f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800391c:	4b25      	ldr	r3, [pc, #148]	; (80039b4 <xTaskIncrementTick+0x160>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	429a      	cmp	r2, r3
 8003922:	d903      	bls.n	800392c <xTaskIncrementTick+0xd8>
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003928:	4a22      	ldr	r2, [pc, #136]	; (80039b4 <xTaskIncrementTick+0x160>)
 800392a:	6013      	str	r3, [r2, #0]
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003930:	4613      	mov	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4a1f      	ldr	r2, [pc, #124]	; (80039b8 <xTaskIncrementTick+0x164>)
 800393a:	441a      	add	r2, r3
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	3304      	adds	r3, #4
 8003940:	4619      	mov	r1, r3
 8003942:	4610      	mov	r0, r2
 8003944:	f7fe fefb 	bl	800273e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800394c:	4b1b      	ldr	r3, [pc, #108]	; (80039bc <xTaskIncrementTick+0x168>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003952:	429a      	cmp	r2, r3
 8003954:	d3b8      	bcc.n	80038c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003956:	2301      	movs	r3, #1
 8003958:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800395a:	e7b5      	b.n	80038c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800395c:	4b17      	ldr	r3, [pc, #92]	; (80039bc <xTaskIncrementTick+0x168>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003962:	4915      	ldr	r1, [pc, #84]	; (80039b8 <xTaskIncrementTick+0x164>)
 8003964:	4613      	mov	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	440b      	add	r3, r1
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d901      	bls.n	8003978 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003974:	2301      	movs	r3, #1
 8003976:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003978:	4b11      	ldr	r3, [pc, #68]	; (80039c0 <xTaskIncrementTick+0x16c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d007      	beq.n	8003990 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003980:	2301      	movs	r3, #1
 8003982:	617b      	str	r3, [r7, #20]
 8003984:	e004      	b.n	8003990 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003986:	4b0f      	ldr	r3, [pc, #60]	; (80039c4 <xTaskIncrementTick+0x170>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	3301      	adds	r3, #1
 800398c:	4a0d      	ldr	r2, [pc, #52]	; (80039c4 <xTaskIncrementTick+0x170>)
 800398e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003990:	697b      	ldr	r3, [r7, #20]
}
 8003992:	4618      	mov	r0, r3
 8003994:	3718      	adds	r7, #24
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	20000d10 	.word	0x20000d10
 80039a0:	20000cec 	.word	0x20000cec
 80039a4:	20000ca0 	.word	0x20000ca0
 80039a8:	20000ca4 	.word	0x20000ca4
 80039ac:	20000d00 	.word	0x20000d00
 80039b0:	20000d08 	.word	0x20000d08
 80039b4:	20000cf0 	.word	0x20000cf0
 80039b8:	20000818 	.word	0x20000818
 80039bc:	20000814 	.word	0x20000814
 80039c0:	20000cfc 	.word	0x20000cfc
 80039c4:	20000cf8 	.word	0x20000cf8

080039c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80039ce:	4b2a      	ldr	r3, [pc, #168]	; (8003a78 <vTaskSwitchContext+0xb0>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80039d6:	4b29      	ldr	r3, [pc, #164]	; (8003a7c <vTaskSwitchContext+0xb4>)
 80039d8:	2201      	movs	r2, #1
 80039da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80039dc:	e046      	b.n	8003a6c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80039de:	4b27      	ldr	r3, [pc, #156]	; (8003a7c <vTaskSwitchContext+0xb4>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039e4:	4b26      	ldr	r3, [pc, #152]	; (8003a80 <vTaskSwitchContext+0xb8>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	60fb      	str	r3, [r7, #12]
 80039ea:	e010      	b.n	8003a0e <vTaskSwitchContext+0x46>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10a      	bne.n	8003a08 <vTaskSwitchContext+0x40>
	__asm volatile
 80039f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f6:	f383 8811 	msr	BASEPRI, r3
 80039fa:	f3bf 8f6f 	isb	sy
 80039fe:	f3bf 8f4f 	dsb	sy
 8003a02:	607b      	str	r3, [r7, #4]
}
 8003a04:	bf00      	nop
 8003a06:	e7fe      	b.n	8003a06 <vTaskSwitchContext+0x3e>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	60fb      	str	r3, [r7, #12]
 8003a0e:	491d      	ldr	r1, [pc, #116]	; (8003a84 <vTaskSwitchContext+0xbc>)
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	4613      	mov	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	440b      	add	r3, r1
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0e4      	beq.n	80039ec <vTaskSwitchContext+0x24>
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	4613      	mov	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4413      	add	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4a15      	ldr	r2, [pc, #84]	; (8003a84 <vTaskSwitchContext+0xbc>)
 8003a2e:	4413      	add	r3, r2
 8003a30:	60bb      	str	r3, [r7, #8]
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	605a      	str	r2, [r3, #4]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	685a      	ldr	r2, [r3, #4]
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	3308      	adds	r3, #8
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d104      	bne.n	8003a52 <vTaskSwitchContext+0x8a>
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	605a      	str	r2, [r3, #4]
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	4a0b      	ldr	r2, [pc, #44]	; (8003a88 <vTaskSwitchContext+0xc0>)
 8003a5a:	6013      	str	r3, [r2, #0]
 8003a5c:	4a08      	ldr	r2, [pc, #32]	; (8003a80 <vTaskSwitchContext+0xb8>)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003a62:	4b09      	ldr	r3, [pc, #36]	; (8003a88 <vTaskSwitchContext+0xc0>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	3354      	adds	r3, #84	; 0x54
 8003a68:	4a08      	ldr	r2, [pc, #32]	; (8003a8c <vTaskSwitchContext+0xc4>)
 8003a6a:	6013      	str	r3, [r2, #0]
}
 8003a6c:	bf00      	nop
 8003a6e:	3714      	adds	r7, #20
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	20000d10 	.word	0x20000d10
 8003a7c:	20000cfc 	.word	0x20000cfc
 8003a80:	20000cf0 	.word	0x20000cf0
 8003a84:	20000818 	.word	0x20000818
 8003a88:	20000814 	.word	0x20000814
 8003a8c:	20000014 	.word	0x20000014

08003a90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10a      	bne.n	8003ab6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa4:	f383 8811 	msr	BASEPRI, r3
 8003aa8:	f3bf 8f6f 	isb	sy
 8003aac:	f3bf 8f4f 	dsb	sy
 8003ab0:	60fb      	str	r3, [r7, #12]
}
 8003ab2:	bf00      	nop
 8003ab4:	e7fe      	b.n	8003ab4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ab6:	4b07      	ldr	r3, [pc, #28]	; (8003ad4 <vTaskPlaceOnEventList+0x44>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	3318      	adds	r3, #24
 8003abc:	4619      	mov	r1, r3
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7fe fe61 	bl	8002786 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	6838      	ldr	r0, [r7, #0]
 8003ac8:	f000 fa80 	bl	8003fcc <prvAddCurrentTaskToDelayedList>
}
 8003acc:	bf00      	nop
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	20000814 	.word	0x20000814

08003ad8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10a      	bne.n	8003b00 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aee:	f383 8811 	msr	BASEPRI, r3
 8003af2:	f3bf 8f6f 	isb	sy
 8003af6:	f3bf 8f4f 	dsb	sy
 8003afa:	617b      	str	r3, [r7, #20]
}
 8003afc:	bf00      	nop
 8003afe:	e7fe      	b.n	8003afe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b00:	4b0a      	ldr	r3, [pc, #40]	; (8003b2c <vTaskPlaceOnEventListRestricted+0x54>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	3318      	adds	r3, #24
 8003b06:	4619      	mov	r1, r3
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f7fe fe18 	bl	800273e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d002      	beq.n	8003b1a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003b14:	f04f 33ff 	mov.w	r3, #4294967295
 8003b18:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003b1a:	6879      	ldr	r1, [r7, #4]
 8003b1c:	68b8      	ldr	r0, [r7, #8]
 8003b1e:	f000 fa55 	bl	8003fcc <prvAddCurrentTaskToDelayedList>
	}
 8003b22:	bf00      	nop
 8003b24:	3718      	adds	r7, #24
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	20000814 	.word	0x20000814

08003b30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10a      	bne.n	8003b5c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4a:	f383 8811 	msr	BASEPRI, r3
 8003b4e:	f3bf 8f6f 	isb	sy
 8003b52:	f3bf 8f4f 	dsb	sy
 8003b56:	60fb      	str	r3, [r7, #12]
}
 8003b58:	bf00      	nop
 8003b5a:	e7fe      	b.n	8003b5a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	3318      	adds	r3, #24
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7fe fe49 	bl	80027f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b66:	4b1e      	ldr	r3, [pc, #120]	; (8003be0 <xTaskRemoveFromEventList+0xb0>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d11d      	bne.n	8003baa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	3304      	adds	r3, #4
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fe fe40 	bl	80027f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b7c:	4b19      	ldr	r3, [pc, #100]	; (8003be4 <xTaskRemoveFromEventList+0xb4>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d903      	bls.n	8003b8c <xTaskRemoveFromEventList+0x5c>
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b88:	4a16      	ldr	r2, [pc, #88]	; (8003be4 <xTaskRemoveFromEventList+0xb4>)
 8003b8a:	6013      	str	r3, [r2, #0]
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b90:	4613      	mov	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4413      	add	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4a13      	ldr	r2, [pc, #76]	; (8003be8 <xTaskRemoveFromEventList+0xb8>)
 8003b9a:	441a      	add	r2, r3
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	3304      	adds	r3, #4
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	4610      	mov	r0, r2
 8003ba4:	f7fe fdcb 	bl	800273e <vListInsertEnd>
 8003ba8:	e005      	b.n	8003bb6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	3318      	adds	r3, #24
 8003bae:	4619      	mov	r1, r3
 8003bb0:	480e      	ldr	r0, [pc, #56]	; (8003bec <xTaskRemoveFromEventList+0xbc>)
 8003bb2:	f7fe fdc4 	bl	800273e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bba:	4b0d      	ldr	r3, [pc, #52]	; (8003bf0 <xTaskRemoveFromEventList+0xc0>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d905      	bls.n	8003bd0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003bc8:	4b0a      	ldr	r3, [pc, #40]	; (8003bf4 <xTaskRemoveFromEventList+0xc4>)
 8003bca:	2201      	movs	r2, #1
 8003bcc:	601a      	str	r2, [r3, #0]
 8003bce:	e001      	b.n	8003bd4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003bd4:	697b      	ldr	r3, [r7, #20]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3718      	adds	r7, #24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	20000d10 	.word	0x20000d10
 8003be4:	20000cf0 	.word	0x20000cf0
 8003be8:	20000818 	.word	0x20000818
 8003bec:	20000ca8 	.word	0x20000ca8
 8003bf0:	20000814 	.word	0x20000814
 8003bf4:	20000cfc 	.word	0x20000cfc

08003bf8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003c00:	4b06      	ldr	r3, [pc, #24]	; (8003c1c <vTaskInternalSetTimeOutState+0x24>)
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003c08:	4b05      	ldr	r3, [pc, #20]	; (8003c20 <vTaskInternalSetTimeOutState+0x28>)
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	605a      	str	r2, [r3, #4]
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	20000d00 	.word	0x20000d00
 8003c20:	20000cec 	.word	0x20000cec

08003c24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b088      	sub	sp, #32
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10a      	bne.n	8003c4a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c38:	f383 8811 	msr	BASEPRI, r3
 8003c3c:	f3bf 8f6f 	isb	sy
 8003c40:	f3bf 8f4f 	dsb	sy
 8003c44:	613b      	str	r3, [r7, #16]
}
 8003c46:	bf00      	nop
 8003c48:	e7fe      	b.n	8003c48 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10a      	bne.n	8003c66 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c54:	f383 8811 	msr	BASEPRI, r3
 8003c58:	f3bf 8f6f 	isb	sy
 8003c5c:	f3bf 8f4f 	dsb	sy
 8003c60:	60fb      	str	r3, [r7, #12]
}
 8003c62:	bf00      	nop
 8003c64:	e7fe      	b.n	8003c64 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003c66:	f000 fe7d 	bl	8004964 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003c6a:	4b1d      	ldr	r3, [pc, #116]	; (8003ce0 <xTaskCheckForTimeOut+0xbc>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c82:	d102      	bne.n	8003c8a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003c84:	2300      	movs	r3, #0
 8003c86:	61fb      	str	r3, [r7, #28]
 8003c88:	e023      	b.n	8003cd2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	4b15      	ldr	r3, [pc, #84]	; (8003ce4 <xTaskCheckForTimeOut+0xc0>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d007      	beq.n	8003ca6 <xTaskCheckForTimeOut+0x82>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d302      	bcc.n	8003ca6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	61fb      	str	r3, [r7, #28]
 8003ca4:	e015      	b.n	8003cd2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d20b      	bcs.n	8003cc8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	1ad2      	subs	r2, r2, r3
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f7ff ff9b 	bl	8003bf8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61fb      	str	r3, [r7, #28]
 8003cc6:	e004      	b.n	8003cd2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003cd2:	f000 fe77 	bl	80049c4 <vPortExitCritical>

	return xReturn;
 8003cd6:	69fb      	ldr	r3, [r7, #28]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3720      	adds	r7, #32
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	20000cec 	.word	0x20000cec
 8003ce4:	20000d00 	.word	0x20000d00

08003ce8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003cec:	4b03      	ldr	r3, [pc, #12]	; (8003cfc <vTaskMissedYield+0x14>)
 8003cee:	2201      	movs	r2, #1
 8003cf0:	601a      	str	r2, [r3, #0]
}
 8003cf2:	bf00      	nop
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	20000cfc 	.word	0x20000cfc

08003d00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d08:	f000 f852 	bl	8003db0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d0c:	4b06      	ldr	r3, [pc, #24]	; (8003d28 <prvIdleTask+0x28>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d9f9      	bls.n	8003d08 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d14:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <prvIdleTask+0x2c>)
 8003d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	f3bf 8f4f 	dsb	sy
 8003d20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d24:	e7f0      	b.n	8003d08 <prvIdleTask+0x8>
 8003d26:	bf00      	nop
 8003d28:	20000818 	.word	0x20000818
 8003d2c:	e000ed04 	.word	0xe000ed04

08003d30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d36:	2300      	movs	r3, #0
 8003d38:	607b      	str	r3, [r7, #4]
 8003d3a:	e00c      	b.n	8003d56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	4413      	add	r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	4a12      	ldr	r2, [pc, #72]	; (8003d90 <prvInitialiseTaskLists+0x60>)
 8003d48:	4413      	add	r3, r2
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7fe fcca 	bl	80026e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3301      	adds	r3, #1
 8003d54:	607b      	str	r3, [r7, #4]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2b37      	cmp	r3, #55	; 0x37
 8003d5a:	d9ef      	bls.n	8003d3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003d5c:	480d      	ldr	r0, [pc, #52]	; (8003d94 <prvInitialiseTaskLists+0x64>)
 8003d5e:	f7fe fcc1 	bl	80026e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003d62:	480d      	ldr	r0, [pc, #52]	; (8003d98 <prvInitialiseTaskLists+0x68>)
 8003d64:	f7fe fcbe 	bl	80026e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003d68:	480c      	ldr	r0, [pc, #48]	; (8003d9c <prvInitialiseTaskLists+0x6c>)
 8003d6a:	f7fe fcbb 	bl	80026e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003d6e:	480c      	ldr	r0, [pc, #48]	; (8003da0 <prvInitialiseTaskLists+0x70>)
 8003d70:	f7fe fcb8 	bl	80026e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003d74:	480b      	ldr	r0, [pc, #44]	; (8003da4 <prvInitialiseTaskLists+0x74>)
 8003d76:	f7fe fcb5 	bl	80026e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003d7a:	4b0b      	ldr	r3, [pc, #44]	; (8003da8 <prvInitialiseTaskLists+0x78>)
 8003d7c:	4a05      	ldr	r2, [pc, #20]	; (8003d94 <prvInitialiseTaskLists+0x64>)
 8003d7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d80:	4b0a      	ldr	r3, [pc, #40]	; (8003dac <prvInitialiseTaskLists+0x7c>)
 8003d82:	4a05      	ldr	r2, [pc, #20]	; (8003d98 <prvInitialiseTaskLists+0x68>)
 8003d84:	601a      	str	r2, [r3, #0]
}
 8003d86:	bf00      	nop
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	20000818 	.word	0x20000818
 8003d94:	20000c78 	.word	0x20000c78
 8003d98:	20000c8c 	.word	0x20000c8c
 8003d9c:	20000ca8 	.word	0x20000ca8
 8003da0:	20000cbc 	.word	0x20000cbc
 8003da4:	20000cd4 	.word	0x20000cd4
 8003da8:	20000ca0 	.word	0x20000ca0
 8003dac:	20000ca4 	.word	0x20000ca4

08003db0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003db6:	e019      	b.n	8003dec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003db8:	f000 fdd4 	bl	8004964 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dbc:	4b10      	ldr	r3, [pc, #64]	; (8003e00 <prvCheckTasksWaitingTermination+0x50>)
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7fe fd15 	bl	80027f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003dce:	4b0d      	ldr	r3, [pc, #52]	; (8003e04 <prvCheckTasksWaitingTermination+0x54>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	4a0b      	ldr	r2, [pc, #44]	; (8003e04 <prvCheckTasksWaitingTermination+0x54>)
 8003dd6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003dd8:	4b0b      	ldr	r3, [pc, #44]	; (8003e08 <prvCheckTasksWaitingTermination+0x58>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	4a0a      	ldr	r2, [pc, #40]	; (8003e08 <prvCheckTasksWaitingTermination+0x58>)
 8003de0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003de2:	f000 fdef 	bl	80049c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f810 	bl	8003e0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003dec:	4b06      	ldr	r3, [pc, #24]	; (8003e08 <prvCheckTasksWaitingTermination+0x58>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1e1      	bne.n	8003db8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003df4:	bf00      	nop
 8003df6:	bf00      	nop
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	20000cbc 	.word	0x20000cbc
 8003e04:	20000ce8 	.word	0x20000ce8
 8003e08:	20000cd0 	.word	0x20000cd0

08003e0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3354      	adds	r3, #84	; 0x54
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f001 f8f9 	bl	8005010 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d108      	bne.n	8003e3a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f000 ff87 	bl	8004d40 <vPortFree>
				vPortFree( pxTCB );
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 ff84 	bl	8004d40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e38:	e018      	b.n	8003e6c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d103      	bne.n	8003e4c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 ff7b 	bl	8004d40 <vPortFree>
	}
 8003e4a:	e00f      	b.n	8003e6c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d00a      	beq.n	8003e6c <prvDeleteTCB+0x60>
	__asm volatile
 8003e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5a:	f383 8811 	msr	BASEPRI, r3
 8003e5e:	f3bf 8f6f 	isb	sy
 8003e62:	f3bf 8f4f 	dsb	sy
 8003e66:	60fb      	str	r3, [r7, #12]
}
 8003e68:	bf00      	nop
 8003e6a:	e7fe      	b.n	8003e6a <prvDeleteTCB+0x5e>
	}
 8003e6c:	bf00      	nop
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e7a:	4b0c      	ldr	r3, [pc, #48]	; (8003eac <prvResetNextTaskUnblockTime+0x38>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d104      	bne.n	8003e8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e84:	4b0a      	ldr	r3, [pc, #40]	; (8003eb0 <prvResetNextTaskUnblockTime+0x3c>)
 8003e86:	f04f 32ff 	mov.w	r2, #4294967295
 8003e8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003e8c:	e008      	b.n	8003ea0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e8e:	4b07      	ldr	r3, [pc, #28]	; (8003eac <prvResetNextTaskUnblockTime+0x38>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	4a04      	ldr	r2, [pc, #16]	; (8003eb0 <prvResetNextTaskUnblockTime+0x3c>)
 8003e9e:	6013      	str	r3, [r2, #0]
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	20000ca0 	.word	0x20000ca0
 8003eb0:	20000d08 	.word	0x20000d08

08003eb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003eba:	4b0b      	ldr	r3, [pc, #44]	; (8003ee8 <xTaskGetSchedulerState+0x34>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d102      	bne.n	8003ec8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	607b      	str	r3, [r7, #4]
 8003ec6:	e008      	b.n	8003eda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ec8:	4b08      	ldr	r3, [pc, #32]	; (8003eec <xTaskGetSchedulerState+0x38>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d102      	bne.n	8003ed6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	607b      	str	r3, [r7, #4]
 8003ed4:	e001      	b.n	8003eda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003eda:	687b      	ldr	r3, [r7, #4]
	}
 8003edc:	4618      	mov	r0, r3
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	20000cf4 	.word	0x20000cf4
 8003eec:	20000d10 	.word	0x20000d10

08003ef0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003efc:	2300      	movs	r3, #0
 8003efe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d056      	beq.n	8003fb4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003f06:	4b2e      	ldr	r3, [pc, #184]	; (8003fc0 <xTaskPriorityDisinherit+0xd0>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d00a      	beq.n	8003f26 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f14:	f383 8811 	msr	BASEPRI, r3
 8003f18:	f3bf 8f6f 	isb	sy
 8003f1c:	f3bf 8f4f 	dsb	sy
 8003f20:	60fb      	str	r3, [r7, #12]
}
 8003f22:	bf00      	nop
 8003f24:	e7fe      	b.n	8003f24 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10a      	bne.n	8003f44 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f32:	f383 8811 	msr	BASEPRI, r3
 8003f36:	f3bf 8f6f 	isb	sy
 8003f3a:	f3bf 8f4f 	dsb	sy
 8003f3e:	60bb      	str	r3, [r7, #8]
}
 8003f40:	bf00      	nop
 8003f42:	e7fe      	b.n	8003f42 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f48:	1e5a      	subs	r2, r3, #1
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d02c      	beq.n	8003fb4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d128      	bne.n	8003fb4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	3304      	adds	r3, #4
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fe fc46 	bl	80027f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f78:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f84:	4b0f      	ldr	r3, [pc, #60]	; (8003fc4 <xTaskPriorityDisinherit+0xd4>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d903      	bls.n	8003f94 <xTaskPriorityDisinherit+0xa4>
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f90:	4a0c      	ldr	r2, [pc, #48]	; (8003fc4 <xTaskPriorityDisinherit+0xd4>)
 8003f92:	6013      	str	r3, [r2, #0]
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f98:	4613      	mov	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4413      	add	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4a09      	ldr	r2, [pc, #36]	; (8003fc8 <xTaskPriorityDisinherit+0xd8>)
 8003fa2:	441a      	add	r2, r3
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	3304      	adds	r3, #4
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4610      	mov	r0, r2
 8003fac:	f7fe fbc7 	bl	800273e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003fb4:	697b      	ldr	r3, [r7, #20]
	}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3718      	adds	r7, #24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	20000814 	.word	0x20000814
 8003fc4:	20000cf0 	.word	0x20000cf0
 8003fc8:	20000818 	.word	0x20000818

08003fcc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003fd6:	4b21      	ldr	r3, [pc, #132]	; (800405c <prvAddCurrentTaskToDelayedList+0x90>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fdc:	4b20      	ldr	r3, [pc, #128]	; (8004060 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	3304      	adds	r3, #4
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fe fc08 	bl	80027f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fee:	d10a      	bne.n	8004006 <prvAddCurrentTaskToDelayedList+0x3a>
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d007      	beq.n	8004006 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ff6:	4b1a      	ldr	r3, [pc, #104]	; (8004060 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	3304      	adds	r3, #4
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	4819      	ldr	r0, [pc, #100]	; (8004064 <prvAddCurrentTaskToDelayedList+0x98>)
 8004000:	f7fe fb9d 	bl	800273e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004004:	e026      	b.n	8004054 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4413      	add	r3, r2
 800400c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800400e:	4b14      	ldr	r3, [pc, #80]	; (8004060 <prvAddCurrentTaskToDelayedList+0x94>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	429a      	cmp	r2, r3
 800401c:	d209      	bcs.n	8004032 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800401e:	4b12      	ldr	r3, [pc, #72]	; (8004068 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	4b0f      	ldr	r3, [pc, #60]	; (8004060 <prvAddCurrentTaskToDelayedList+0x94>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	3304      	adds	r3, #4
 8004028:	4619      	mov	r1, r3
 800402a:	4610      	mov	r0, r2
 800402c:	f7fe fbab 	bl	8002786 <vListInsert>
}
 8004030:	e010      	b.n	8004054 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004032:	4b0e      	ldr	r3, [pc, #56]	; (800406c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	4b0a      	ldr	r3, [pc, #40]	; (8004060 <prvAddCurrentTaskToDelayedList+0x94>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	3304      	adds	r3, #4
 800403c:	4619      	mov	r1, r3
 800403e:	4610      	mov	r0, r2
 8004040:	f7fe fba1 	bl	8002786 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004044:	4b0a      	ldr	r3, [pc, #40]	; (8004070 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	429a      	cmp	r2, r3
 800404c:	d202      	bcs.n	8004054 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800404e:	4a08      	ldr	r2, [pc, #32]	; (8004070 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	6013      	str	r3, [r2, #0]
}
 8004054:	bf00      	nop
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	20000cec 	.word	0x20000cec
 8004060:	20000814 	.word	0x20000814
 8004064:	20000cd4 	.word	0x20000cd4
 8004068:	20000ca4 	.word	0x20000ca4
 800406c:	20000ca0 	.word	0x20000ca0
 8004070:	20000d08 	.word	0x20000d08

08004074 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b08a      	sub	sp, #40	; 0x28
 8004078:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800407a:	2300      	movs	r3, #0
 800407c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800407e:	f000 fb07 	bl	8004690 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004082:	4b1c      	ldr	r3, [pc, #112]	; (80040f4 <xTimerCreateTimerTask+0x80>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d021      	beq.n	80040ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800408a:	2300      	movs	r3, #0
 800408c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800408e:	2300      	movs	r3, #0
 8004090:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004092:	1d3a      	adds	r2, r7, #4
 8004094:	f107 0108 	add.w	r1, r7, #8
 8004098:	f107 030c 	add.w	r3, r7, #12
 800409c:	4618      	mov	r0, r3
 800409e:	f7fe fb07 	bl	80026b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80040a2:	6879      	ldr	r1, [r7, #4]
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	9202      	str	r2, [sp, #8]
 80040aa:	9301      	str	r3, [sp, #4]
 80040ac:	2302      	movs	r3, #2
 80040ae:	9300      	str	r3, [sp, #0]
 80040b0:	2300      	movs	r3, #0
 80040b2:	460a      	mov	r2, r1
 80040b4:	4910      	ldr	r1, [pc, #64]	; (80040f8 <xTimerCreateTimerTask+0x84>)
 80040b6:	4811      	ldr	r0, [pc, #68]	; (80040fc <xTimerCreateTimerTask+0x88>)
 80040b8:	f7ff f8b4 	bl	8003224 <xTaskCreateStatic>
 80040bc:	4603      	mov	r3, r0
 80040be:	4a10      	ldr	r2, [pc, #64]	; (8004100 <xTimerCreateTimerTask+0x8c>)
 80040c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80040c2:	4b0f      	ldr	r3, [pc, #60]	; (8004100 <xTimerCreateTimerTask+0x8c>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80040ca:	2301      	movs	r3, #1
 80040cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10a      	bne.n	80040ea <xTimerCreateTimerTask+0x76>
	__asm volatile
 80040d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d8:	f383 8811 	msr	BASEPRI, r3
 80040dc:	f3bf 8f6f 	isb	sy
 80040e0:	f3bf 8f4f 	dsb	sy
 80040e4:	613b      	str	r3, [r7, #16]
}
 80040e6:	bf00      	nop
 80040e8:	e7fe      	b.n	80040e8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80040ea:	697b      	ldr	r3, [r7, #20]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3718      	adds	r7, #24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	20000d44 	.word	0x20000d44
 80040f8:	080051c4 	.word	0x080051c4
 80040fc:	08004239 	.word	0x08004239
 8004100:	20000d48 	.word	0x20000d48

08004104 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b08a      	sub	sp, #40	; 0x28
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
 8004110:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004112:	2300      	movs	r3, #0
 8004114:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10a      	bne.n	8004132 <xTimerGenericCommand+0x2e>
	__asm volatile
 800411c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004120:	f383 8811 	msr	BASEPRI, r3
 8004124:	f3bf 8f6f 	isb	sy
 8004128:	f3bf 8f4f 	dsb	sy
 800412c:	623b      	str	r3, [r7, #32]
}
 800412e:	bf00      	nop
 8004130:	e7fe      	b.n	8004130 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004132:	4b1a      	ldr	r3, [pc, #104]	; (800419c <xTimerGenericCommand+0x98>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d02a      	beq.n	8004190 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	2b05      	cmp	r3, #5
 800414a:	dc18      	bgt.n	800417e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800414c:	f7ff feb2 	bl	8003eb4 <xTaskGetSchedulerState>
 8004150:	4603      	mov	r3, r0
 8004152:	2b02      	cmp	r3, #2
 8004154:	d109      	bne.n	800416a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004156:	4b11      	ldr	r3, [pc, #68]	; (800419c <xTimerGenericCommand+0x98>)
 8004158:	6818      	ldr	r0, [r3, #0]
 800415a:	f107 0110 	add.w	r1, r7, #16
 800415e:	2300      	movs	r3, #0
 8004160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004162:	f7fe fc77 	bl	8002a54 <xQueueGenericSend>
 8004166:	6278      	str	r0, [r7, #36]	; 0x24
 8004168:	e012      	b.n	8004190 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800416a:	4b0c      	ldr	r3, [pc, #48]	; (800419c <xTimerGenericCommand+0x98>)
 800416c:	6818      	ldr	r0, [r3, #0]
 800416e:	f107 0110 	add.w	r1, r7, #16
 8004172:	2300      	movs	r3, #0
 8004174:	2200      	movs	r2, #0
 8004176:	f7fe fc6d 	bl	8002a54 <xQueueGenericSend>
 800417a:	6278      	str	r0, [r7, #36]	; 0x24
 800417c:	e008      	b.n	8004190 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800417e:	4b07      	ldr	r3, [pc, #28]	; (800419c <xTimerGenericCommand+0x98>)
 8004180:	6818      	ldr	r0, [r3, #0]
 8004182:	f107 0110 	add.w	r1, r7, #16
 8004186:	2300      	movs	r3, #0
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	f7fe fd61 	bl	8002c50 <xQueueGenericSendFromISR>
 800418e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004192:	4618      	mov	r0, r3
 8004194:	3728      	adds	r7, #40	; 0x28
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	20000d44 	.word	0x20000d44

080041a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b088      	sub	sp, #32
 80041a4:	af02      	add	r7, sp, #8
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041aa:	4b22      	ldr	r3, [pc, #136]	; (8004234 <prvProcessExpiredTimer+0x94>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	3304      	adds	r3, #4
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7fe fb1d 	bl	80027f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d022      	beq.n	8004212 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	699a      	ldr	r2, [r3, #24]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	18d1      	adds	r1, r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	683a      	ldr	r2, [r7, #0]
 80041d8:	6978      	ldr	r0, [r7, #20]
 80041da:	f000 f8d1 	bl	8004380 <prvInsertTimerInActiveList>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d01f      	beq.n	8004224 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80041e4:	2300      	movs	r3, #0
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	2300      	movs	r3, #0
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	2100      	movs	r1, #0
 80041ee:	6978      	ldr	r0, [r7, #20]
 80041f0:	f7ff ff88 	bl	8004104 <xTimerGenericCommand>
 80041f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d113      	bne.n	8004224 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80041fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004200:	f383 8811 	msr	BASEPRI, r3
 8004204:	f3bf 8f6f 	isb	sy
 8004208:	f3bf 8f4f 	dsb	sy
 800420c:	60fb      	str	r3, [r7, #12]
}
 800420e:	bf00      	nop
 8004210:	e7fe      	b.n	8004210 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004218:	f023 0301 	bic.w	r3, r3, #1
 800421c:	b2da      	uxtb	r2, r3
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	6978      	ldr	r0, [r7, #20]
 800422a:	4798      	blx	r3
}
 800422c:	bf00      	nop
 800422e:	3718      	adds	r7, #24
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	20000d3c 	.word	0x20000d3c

08004238 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004240:	f107 0308 	add.w	r3, r7, #8
 8004244:	4618      	mov	r0, r3
 8004246:	f000 f857 	bl	80042f8 <prvGetNextExpireTime>
 800424a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	4619      	mov	r1, r3
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 f803 	bl	800425c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004256:	f000 f8d5 	bl	8004404 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800425a:	e7f1      	b.n	8004240 <prvTimerTask+0x8>

0800425c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004266:	f7ff fa39 	bl	80036dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800426a:	f107 0308 	add.w	r3, r7, #8
 800426e:	4618      	mov	r0, r3
 8004270:	f000 f866 	bl	8004340 <prvSampleTimeNow>
 8004274:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d130      	bne.n	80042de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10a      	bne.n	8004298 <prvProcessTimerOrBlockTask+0x3c>
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	429a      	cmp	r2, r3
 8004288:	d806      	bhi.n	8004298 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800428a:	f7ff fa35 	bl	80036f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800428e:	68f9      	ldr	r1, [r7, #12]
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f7ff ff85 	bl	80041a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004296:	e024      	b.n	80042e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d008      	beq.n	80042b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800429e:	4b13      	ldr	r3, [pc, #76]	; (80042ec <prvProcessTimerOrBlockTask+0x90>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d101      	bne.n	80042ac <prvProcessTimerOrBlockTask+0x50>
 80042a8:	2301      	movs	r3, #1
 80042aa:	e000      	b.n	80042ae <prvProcessTimerOrBlockTask+0x52>
 80042ac:	2300      	movs	r3, #0
 80042ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80042b0:	4b0f      	ldr	r3, [pc, #60]	; (80042f0 <prvProcessTimerOrBlockTask+0x94>)
 80042b2:	6818      	ldr	r0, [r3, #0]
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	683a      	ldr	r2, [r7, #0]
 80042bc:	4619      	mov	r1, r3
 80042be:	f7fe ff7d 	bl	80031bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80042c2:	f7ff fa19 	bl	80036f8 <xTaskResumeAll>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10a      	bne.n	80042e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80042cc:	4b09      	ldr	r3, [pc, #36]	; (80042f4 <prvProcessTimerOrBlockTask+0x98>)
 80042ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	f3bf 8f4f 	dsb	sy
 80042d8:	f3bf 8f6f 	isb	sy
}
 80042dc:	e001      	b.n	80042e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80042de:	f7ff fa0b 	bl	80036f8 <xTaskResumeAll>
}
 80042e2:	bf00      	nop
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	20000d40 	.word	0x20000d40
 80042f0:	20000d44 	.word	0x20000d44
 80042f4:	e000ed04 	.word	0xe000ed04

080042f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80042f8:	b480      	push	{r7}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004300:	4b0e      	ldr	r3, [pc, #56]	; (800433c <prvGetNextExpireTime+0x44>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <prvGetNextExpireTime+0x16>
 800430a:	2201      	movs	r2, #1
 800430c:	e000      	b.n	8004310 <prvGetNextExpireTime+0x18>
 800430e:	2200      	movs	r2, #0
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d105      	bne.n	8004328 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800431c:	4b07      	ldr	r3, [pc, #28]	; (800433c <prvGetNextExpireTime+0x44>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	60fb      	str	r3, [r7, #12]
 8004326:	e001      	b.n	800432c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004328:	2300      	movs	r3, #0
 800432a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800432c:	68fb      	ldr	r3, [r7, #12]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	20000d3c 	.word	0x20000d3c

08004340 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004348:	f7ff fa74 	bl	8003834 <xTaskGetTickCount>
 800434c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800434e:	4b0b      	ldr	r3, [pc, #44]	; (800437c <prvSampleTimeNow+0x3c>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	429a      	cmp	r2, r3
 8004356:	d205      	bcs.n	8004364 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004358:	f000 f936 	bl	80045c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	e002      	b.n	800436a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800436a:	4a04      	ldr	r2, [pc, #16]	; (800437c <prvSampleTimeNow+0x3c>)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004370:	68fb      	ldr	r3, [r7, #12]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	20000d4c 	.word	0x20000d4c

08004380 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
 800438c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800438e:	2300      	movs	r3, #0
 8004390:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	68ba      	ldr	r2, [r7, #8]
 8004396:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d812      	bhi.n	80043cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	1ad2      	subs	r2, r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d302      	bcc.n	80043ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80043b4:	2301      	movs	r3, #1
 80043b6:	617b      	str	r3, [r7, #20]
 80043b8:	e01b      	b.n	80043f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80043ba:	4b10      	ldr	r3, [pc, #64]	; (80043fc <prvInsertTimerInActiveList+0x7c>)
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	3304      	adds	r3, #4
 80043c2:	4619      	mov	r1, r3
 80043c4:	4610      	mov	r0, r2
 80043c6:	f7fe f9de 	bl	8002786 <vListInsert>
 80043ca:	e012      	b.n	80043f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d206      	bcs.n	80043e2 <prvInsertTimerInActiveList+0x62>
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d302      	bcc.n	80043e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80043dc:	2301      	movs	r3, #1
 80043de:	617b      	str	r3, [r7, #20]
 80043e0:	e007      	b.n	80043f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80043e2:	4b07      	ldr	r3, [pc, #28]	; (8004400 <prvInsertTimerInActiveList+0x80>)
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	3304      	adds	r3, #4
 80043ea:	4619      	mov	r1, r3
 80043ec:	4610      	mov	r0, r2
 80043ee:	f7fe f9ca 	bl	8002786 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80043f2:	697b      	ldr	r3, [r7, #20]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3718      	adds	r7, #24
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	20000d40 	.word	0x20000d40
 8004400:	20000d3c 	.word	0x20000d3c

08004404 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b08e      	sub	sp, #56	; 0x38
 8004408:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800440a:	e0ca      	b.n	80045a2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	da18      	bge.n	8004444 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004412:	1d3b      	adds	r3, r7, #4
 8004414:	3304      	adds	r3, #4
 8004416:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10a      	bne.n	8004434 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800441e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004422:	f383 8811 	msr	BASEPRI, r3
 8004426:	f3bf 8f6f 	isb	sy
 800442a:	f3bf 8f4f 	dsb	sy
 800442e:	61fb      	str	r3, [r7, #28]
}
 8004430:	bf00      	nop
 8004432:	e7fe      	b.n	8004432 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800443a:	6850      	ldr	r0, [r2, #4]
 800443c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800443e:	6892      	ldr	r2, [r2, #8]
 8004440:	4611      	mov	r1, r2
 8004442:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	f2c0 80aa 	blt.w	80045a0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d004      	beq.n	8004462 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445a:	3304      	adds	r3, #4
 800445c:	4618      	mov	r0, r3
 800445e:	f7fe f9cb 	bl	80027f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004462:	463b      	mov	r3, r7
 8004464:	4618      	mov	r0, r3
 8004466:	f7ff ff6b 	bl	8004340 <prvSampleTimeNow>
 800446a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b09      	cmp	r3, #9
 8004470:	f200 8097 	bhi.w	80045a2 <prvProcessReceivedCommands+0x19e>
 8004474:	a201      	add	r2, pc, #4	; (adr r2, 800447c <prvProcessReceivedCommands+0x78>)
 8004476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800447a:	bf00      	nop
 800447c:	080044a5 	.word	0x080044a5
 8004480:	080044a5 	.word	0x080044a5
 8004484:	080044a5 	.word	0x080044a5
 8004488:	08004519 	.word	0x08004519
 800448c:	0800452d 	.word	0x0800452d
 8004490:	08004577 	.word	0x08004577
 8004494:	080044a5 	.word	0x080044a5
 8004498:	080044a5 	.word	0x080044a5
 800449c:	08004519 	.word	0x08004519
 80044a0:	0800452d 	.word	0x0800452d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80044a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044aa:	f043 0301 	orr.w	r3, r3, #1
 80044ae:	b2da      	uxtb	r2, r3
 80044b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	18d1      	adds	r1, r2, r3
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044c4:	f7ff ff5c 	bl	8004380 <prvInsertTimerInActiveList>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d069      	beq.n	80045a2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80044ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80044d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044dc:	f003 0304 	and.w	r3, r3, #4
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d05e      	beq.n	80045a2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	441a      	add	r2, r3
 80044ec:	2300      	movs	r3, #0
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	2300      	movs	r3, #0
 80044f2:	2100      	movs	r1, #0
 80044f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044f6:	f7ff fe05 	bl	8004104 <xTimerGenericCommand>
 80044fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80044fc:	6a3b      	ldr	r3, [r7, #32]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d14f      	bne.n	80045a2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004506:	f383 8811 	msr	BASEPRI, r3
 800450a:	f3bf 8f6f 	isb	sy
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	61bb      	str	r3, [r7, #24]
}
 8004514:	bf00      	nop
 8004516:	e7fe      	b.n	8004516 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800451e:	f023 0301 	bic.w	r3, r3, #1
 8004522:	b2da      	uxtb	r2, r3
 8004524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004526:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800452a:	e03a      	b.n	80045a2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800452c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004532:	f043 0301 	orr.w	r3, r3, #1
 8004536:	b2da      	uxtb	r2, r3
 8004538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004542:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10a      	bne.n	8004562 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800454c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004550:	f383 8811 	msr	BASEPRI, r3
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	f3bf 8f4f 	dsb	sy
 800455c:	617b      	str	r3, [r7, #20]
}
 800455e:	bf00      	nop
 8004560:	e7fe      	b.n	8004560 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004564:	699a      	ldr	r2, [r3, #24]
 8004566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004568:	18d1      	adds	r1, r2, r3
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800456e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004570:	f7ff ff06 	bl	8004380 <prvInsertTimerInActiveList>
					break;
 8004574:	e015      	b.n	80045a2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004578:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d103      	bne.n	800458c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004584:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004586:	f000 fbdb 	bl	8004d40 <vPortFree>
 800458a:	e00a      	b.n	80045a2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800458c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004592:	f023 0301 	bic.w	r3, r3, #1
 8004596:	b2da      	uxtb	r2, r3
 8004598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800459e:	e000      	b.n	80045a2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80045a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80045a2:	4b08      	ldr	r3, [pc, #32]	; (80045c4 <prvProcessReceivedCommands+0x1c0>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	1d39      	adds	r1, r7, #4
 80045a8:	2200      	movs	r2, #0
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7fe fbec 	bl	8002d88 <xQueueReceive>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f47f af2a 	bne.w	800440c <prvProcessReceivedCommands+0x8>
	}
}
 80045b8:	bf00      	nop
 80045ba:	bf00      	nop
 80045bc:	3730      	adds	r7, #48	; 0x30
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	20000d44 	.word	0x20000d44

080045c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b088      	sub	sp, #32
 80045cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80045ce:	e048      	b.n	8004662 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80045d0:	4b2d      	ldr	r3, [pc, #180]	; (8004688 <prvSwitchTimerLists+0xc0>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045da:	4b2b      	ldr	r3, [pc, #172]	; (8004688 <prvSwitchTimerLists+0xc0>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	3304      	adds	r3, #4
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7fe f905 	bl	80027f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b00      	cmp	r3, #0
 8004602:	d02e      	beq.n	8004662 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	4413      	add	r3, r2
 800460c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	429a      	cmp	r2, r3
 8004614:	d90e      	bls.n	8004634 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004622:	4b19      	ldr	r3, [pc, #100]	; (8004688 <prvSwitchTimerLists+0xc0>)
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	3304      	adds	r3, #4
 800462a:	4619      	mov	r1, r3
 800462c:	4610      	mov	r0, r2
 800462e:	f7fe f8aa 	bl	8002786 <vListInsert>
 8004632:	e016      	b.n	8004662 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004634:	2300      	movs	r3, #0
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	2300      	movs	r3, #0
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	2100      	movs	r1, #0
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f7ff fd60 	bl	8004104 <xTimerGenericCommand>
 8004644:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10a      	bne.n	8004662 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800464c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004650:	f383 8811 	msr	BASEPRI, r3
 8004654:	f3bf 8f6f 	isb	sy
 8004658:	f3bf 8f4f 	dsb	sy
 800465c:	603b      	str	r3, [r7, #0]
}
 800465e:	bf00      	nop
 8004660:	e7fe      	b.n	8004660 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004662:	4b09      	ldr	r3, [pc, #36]	; (8004688 <prvSwitchTimerLists+0xc0>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1b1      	bne.n	80045d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800466c:	4b06      	ldr	r3, [pc, #24]	; (8004688 <prvSwitchTimerLists+0xc0>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004672:	4b06      	ldr	r3, [pc, #24]	; (800468c <prvSwitchTimerLists+0xc4>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a04      	ldr	r2, [pc, #16]	; (8004688 <prvSwitchTimerLists+0xc0>)
 8004678:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800467a:	4a04      	ldr	r2, [pc, #16]	; (800468c <prvSwitchTimerLists+0xc4>)
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	6013      	str	r3, [r2, #0]
}
 8004680:	bf00      	nop
 8004682:	3718      	adds	r7, #24
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	20000d3c 	.word	0x20000d3c
 800468c:	20000d40 	.word	0x20000d40

08004690 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004696:	f000 f965 	bl	8004964 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800469a:	4b15      	ldr	r3, [pc, #84]	; (80046f0 <prvCheckForValidListAndQueue+0x60>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d120      	bne.n	80046e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80046a2:	4814      	ldr	r0, [pc, #80]	; (80046f4 <prvCheckForValidListAndQueue+0x64>)
 80046a4:	f7fe f81e 	bl	80026e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80046a8:	4813      	ldr	r0, [pc, #76]	; (80046f8 <prvCheckForValidListAndQueue+0x68>)
 80046aa:	f7fe f81b 	bl	80026e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80046ae:	4b13      	ldr	r3, [pc, #76]	; (80046fc <prvCheckForValidListAndQueue+0x6c>)
 80046b0:	4a10      	ldr	r2, [pc, #64]	; (80046f4 <prvCheckForValidListAndQueue+0x64>)
 80046b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80046b4:	4b12      	ldr	r3, [pc, #72]	; (8004700 <prvCheckForValidListAndQueue+0x70>)
 80046b6:	4a10      	ldr	r2, [pc, #64]	; (80046f8 <prvCheckForValidListAndQueue+0x68>)
 80046b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80046ba:	2300      	movs	r3, #0
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	4b11      	ldr	r3, [pc, #68]	; (8004704 <prvCheckForValidListAndQueue+0x74>)
 80046c0:	4a11      	ldr	r2, [pc, #68]	; (8004708 <prvCheckForValidListAndQueue+0x78>)
 80046c2:	2110      	movs	r1, #16
 80046c4:	200a      	movs	r0, #10
 80046c6:	f7fe f929 	bl	800291c <xQueueGenericCreateStatic>
 80046ca:	4603      	mov	r3, r0
 80046cc:	4a08      	ldr	r2, [pc, #32]	; (80046f0 <prvCheckForValidListAndQueue+0x60>)
 80046ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80046d0:	4b07      	ldr	r3, [pc, #28]	; (80046f0 <prvCheckForValidListAndQueue+0x60>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d005      	beq.n	80046e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80046d8:	4b05      	ldr	r3, [pc, #20]	; (80046f0 <prvCheckForValidListAndQueue+0x60>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	490b      	ldr	r1, [pc, #44]	; (800470c <prvCheckForValidListAndQueue+0x7c>)
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fe fd42 	bl	8003168 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80046e4:	f000 f96e 	bl	80049c4 <vPortExitCritical>
}
 80046e8:	bf00      	nop
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	20000d44 	.word	0x20000d44
 80046f4:	20000d14 	.word	0x20000d14
 80046f8:	20000d28 	.word	0x20000d28
 80046fc:	20000d3c 	.word	0x20000d3c
 8004700:	20000d40 	.word	0x20000d40
 8004704:	20000df0 	.word	0x20000df0
 8004708:	20000d50 	.word	0x20000d50
 800470c:	080051cc 	.word	0x080051cc

08004710 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	3b04      	subs	r3, #4
 8004720:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004728:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	3b04      	subs	r3, #4
 800472e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	f023 0201 	bic.w	r2, r3, #1
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	3b04      	subs	r3, #4
 800473e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004740:	4a0c      	ldr	r2, [pc, #48]	; (8004774 <pxPortInitialiseStack+0x64>)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	3b14      	subs	r3, #20
 800474a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	3b04      	subs	r3, #4
 8004756:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f06f 0202 	mvn.w	r2, #2
 800475e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	3b20      	subs	r3, #32
 8004764:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004766:	68fb      	ldr	r3, [r7, #12]
}
 8004768:	4618      	mov	r0, r3
 800476a:	3714      	adds	r7, #20
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr
 8004774:	08004779 	.word	0x08004779

08004778 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800477e:	2300      	movs	r3, #0
 8004780:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004782:	4b12      	ldr	r3, [pc, #72]	; (80047cc <prvTaskExitError+0x54>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800478a:	d00a      	beq.n	80047a2 <prvTaskExitError+0x2a>
	__asm volatile
 800478c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004790:	f383 8811 	msr	BASEPRI, r3
 8004794:	f3bf 8f6f 	isb	sy
 8004798:	f3bf 8f4f 	dsb	sy
 800479c:	60fb      	str	r3, [r7, #12]
}
 800479e:	bf00      	nop
 80047a0:	e7fe      	b.n	80047a0 <prvTaskExitError+0x28>
	__asm volatile
 80047a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a6:	f383 8811 	msr	BASEPRI, r3
 80047aa:	f3bf 8f6f 	isb	sy
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	60bb      	str	r3, [r7, #8]
}
 80047b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80047b6:	bf00      	nop
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d0fc      	beq.n	80047b8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80047be:	bf00      	nop
 80047c0:	bf00      	nop
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	20000010 	.word	0x20000010

080047d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80047d0:	4b07      	ldr	r3, [pc, #28]	; (80047f0 <pxCurrentTCBConst2>)
 80047d2:	6819      	ldr	r1, [r3, #0]
 80047d4:	6808      	ldr	r0, [r1, #0]
 80047d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047da:	f380 8809 	msr	PSP, r0
 80047de:	f3bf 8f6f 	isb	sy
 80047e2:	f04f 0000 	mov.w	r0, #0
 80047e6:	f380 8811 	msr	BASEPRI, r0
 80047ea:	4770      	bx	lr
 80047ec:	f3af 8000 	nop.w

080047f0 <pxCurrentTCBConst2>:
 80047f0:	20000814 	.word	0x20000814
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80047f4:	bf00      	nop
 80047f6:	bf00      	nop

080047f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80047f8:	4808      	ldr	r0, [pc, #32]	; (800481c <prvPortStartFirstTask+0x24>)
 80047fa:	6800      	ldr	r0, [r0, #0]
 80047fc:	6800      	ldr	r0, [r0, #0]
 80047fe:	f380 8808 	msr	MSP, r0
 8004802:	f04f 0000 	mov.w	r0, #0
 8004806:	f380 8814 	msr	CONTROL, r0
 800480a:	b662      	cpsie	i
 800480c:	b661      	cpsie	f
 800480e:	f3bf 8f4f 	dsb	sy
 8004812:	f3bf 8f6f 	isb	sy
 8004816:	df00      	svc	0
 8004818:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800481a:	bf00      	nop
 800481c:	e000ed08 	.word	0xe000ed08

08004820 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004826:	4b46      	ldr	r3, [pc, #280]	; (8004940 <xPortStartScheduler+0x120>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a46      	ldr	r2, [pc, #280]	; (8004944 <xPortStartScheduler+0x124>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d10a      	bne.n	8004846 <xPortStartScheduler+0x26>
	__asm volatile
 8004830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004834:	f383 8811 	msr	BASEPRI, r3
 8004838:	f3bf 8f6f 	isb	sy
 800483c:	f3bf 8f4f 	dsb	sy
 8004840:	613b      	str	r3, [r7, #16]
}
 8004842:	bf00      	nop
 8004844:	e7fe      	b.n	8004844 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004846:	4b3e      	ldr	r3, [pc, #248]	; (8004940 <xPortStartScheduler+0x120>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a3f      	ldr	r2, [pc, #252]	; (8004948 <xPortStartScheduler+0x128>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d10a      	bne.n	8004866 <xPortStartScheduler+0x46>
	__asm volatile
 8004850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004854:	f383 8811 	msr	BASEPRI, r3
 8004858:	f3bf 8f6f 	isb	sy
 800485c:	f3bf 8f4f 	dsb	sy
 8004860:	60fb      	str	r3, [r7, #12]
}
 8004862:	bf00      	nop
 8004864:	e7fe      	b.n	8004864 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004866:	4b39      	ldr	r3, [pc, #228]	; (800494c <xPortStartScheduler+0x12c>)
 8004868:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	b2db      	uxtb	r3, r3
 8004870:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	22ff      	movs	r2, #255	; 0xff
 8004876:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	b2db      	uxtb	r3, r3
 800487e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004880:	78fb      	ldrb	r3, [r7, #3]
 8004882:	b2db      	uxtb	r3, r3
 8004884:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004888:	b2da      	uxtb	r2, r3
 800488a:	4b31      	ldr	r3, [pc, #196]	; (8004950 <xPortStartScheduler+0x130>)
 800488c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800488e:	4b31      	ldr	r3, [pc, #196]	; (8004954 <xPortStartScheduler+0x134>)
 8004890:	2207      	movs	r2, #7
 8004892:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004894:	e009      	b.n	80048aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004896:	4b2f      	ldr	r3, [pc, #188]	; (8004954 <xPortStartScheduler+0x134>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	3b01      	subs	r3, #1
 800489c:	4a2d      	ldr	r2, [pc, #180]	; (8004954 <xPortStartScheduler+0x134>)
 800489e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80048a0:	78fb      	ldrb	r3, [r7, #3]
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048aa:	78fb      	ldrb	r3, [r7, #3]
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b2:	2b80      	cmp	r3, #128	; 0x80
 80048b4:	d0ef      	beq.n	8004896 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80048b6:	4b27      	ldr	r3, [pc, #156]	; (8004954 <xPortStartScheduler+0x134>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f1c3 0307 	rsb	r3, r3, #7
 80048be:	2b04      	cmp	r3, #4
 80048c0:	d00a      	beq.n	80048d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80048c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c6:	f383 8811 	msr	BASEPRI, r3
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	60bb      	str	r3, [r7, #8]
}
 80048d4:	bf00      	nop
 80048d6:	e7fe      	b.n	80048d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80048d8:	4b1e      	ldr	r3, [pc, #120]	; (8004954 <xPortStartScheduler+0x134>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	021b      	lsls	r3, r3, #8
 80048de:	4a1d      	ldr	r2, [pc, #116]	; (8004954 <xPortStartScheduler+0x134>)
 80048e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80048e2:	4b1c      	ldr	r3, [pc, #112]	; (8004954 <xPortStartScheduler+0x134>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048ea:	4a1a      	ldr	r2, [pc, #104]	; (8004954 <xPortStartScheduler+0x134>)
 80048ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	b2da      	uxtb	r2, r3
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80048f6:	4b18      	ldr	r3, [pc, #96]	; (8004958 <xPortStartScheduler+0x138>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a17      	ldr	r2, [pc, #92]	; (8004958 <xPortStartScheduler+0x138>)
 80048fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004900:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004902:	4b15      	ldr	r3, [pc, #84]	; (8004958 <xPortStartScheduler+0x138>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a14      	ldr	r2, [pc, #80]	; (8004958 <xPortStartScheduler+0x138>)
 8004908:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800490c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800490e:	f000 f8dd 	bl	8004acc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004912:	4b12      	ldr	r3, [pc, #72]	; (800495c <xPortStartScheduler+0x13c>)
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004918:	f000 f8fc 	bl	8004b14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800491c:	4b10      	ldr	r3, [pc, #64]	; (8004960 <xPortStartScheduler+0x140>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a0f      	ldr	r2, [pc, #60]	; (8004960 <xPortStartScheduler+0x140>)
 8004922:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004926:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004928:	f7ff ff66 	bl	80047f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800492c:	f7ff f84c 	bl	80039c8 <vTaskSwitchContext>
	prvTaskExitError();
 8004930:	f7ff ff22 	bl	8004778 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3718      	adds	r7, #24
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	e000ed00 	.word	0xe000ed00
 8004944:	410fc271 	.word	0x410fc271
 8004948:	410fc270 	.word	0x410fc270
 800494c:	e000e400 	.word	0xe000e400
 8004950:	20000e40 	.word	0x20000e40
 8004954:	20000e44 	.word	0x20000e44
 8004958:	e000ed20 	.word	0xe000ed20
 800495c:	20000010 	.word	0x20000010
 8004960:	e000ef34 	.word	0xe000ef34

08004964 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
	__asm volatile
 800496a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496e:	f383 8811 	msr	BASEPRI, r3
 8004972:	f3bf 8f6f 	isb	sy
 8004976:	f3bf 8f4f 	dsb	sy
 800497a:	607b      	str	r3, [r7, #4]
}
 800497c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800497e:	4b0f      	ldr	r3, [pc, #60]	; (80049bc <vPortEnterCritical+0x58>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	3301      	adds	r3, #1
 8004984:	4a0d      	ldr	r2, [pc, #52]	; (80049bc <vPortEnterCritical+0x58>)
 8004986:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004988:	4b0c      	ldr	r3, [pc, #48]	; (80049bc <vPortEnterCritical+0x58>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d10f      	bne.n	80049b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004990:	4b0b      	ldr	r3, [pc, #44]	; (80049c0 <vPortEnterCritical+0x5c>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00a      	beq.n	80049b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800499a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499e:	f383 8811 	msr	BASEPRI, r3
 80049a2:	f3bf 8f6f 	isb	sy
 80049a6:	f3bf 8f4f 	dsb	sy
 80049aa:	603b      	str	r3, [r7, #0]
}
 80049ac:	bf00      	nop
 80049ae:	e7fe      	b.n	80049ae <vPortEnterCritical+0x4a>
	}
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	20000010 	.word	0x20000010
 80049c0:	e000ed04 	.word	0xe000ed04

080049c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80049ca:	4b12      	ldr	r3, [pc, #72]	; (8004a14 <vPortExitCritical+0x50>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10a      	bne.n	80049e8 <vPortExitCritical+0x24>
	__asm volatile
 80049d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d6:	f383 8811 	msr	BASEPRI, r3
 80049da:	f3bf 8f6f 	isb	sy
 80049de:	f3bf 8f4f 	dsb	sy
 80049e2:	607b      	str	r3, [r7, #4]
}
 80049e4:	bf00      	nop
 80049e6:	e7fe      	b.n	80049e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80049e8:	4b0a      	ldr	r3, [pc, #40]	; (8004a14 <vPortExitCritical+0x50>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	3b01      	subs	r3, #1
 80049ee:	4a09      	ldr	r2, [pc, #36]	; (8004a14 <vPortExitCritical+0x50>)
 80049f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80049f2:	4b08      	ldr	r3, [pc, #32]	; (8004a14 <vPortExitCritical+0x50>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d105      	bne.n	8004a06 <vPortExitCritical+0x42>
 80049fa:	2300      	movs	r3, #0
 80049fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	f383 8811 	msr	BASEPRI, r3
}
 8004a04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004a06:	bf00      	nop
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	20000010 	.word	0x20000010
	...

08004a20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004a20:	f3ef 8009 	mrs	r0, PSP
 8004a24:	f3bf 8f6f 	isb	sy
 8004a28:	4b15      	ldr	r3, [pc, #84]	; (8004a80 <pxCurrentTCBConst>)
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	f01e 0f10 	tst.w	lr, #16
 8004a30:	bf08      	it	eq
 8004a32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004a36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a3a:	6010      	str	r0, [r2, #0]
 8004a3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004a40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004a44:	f380 8811 	msr	BASEPRI, r0
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	f3bf 8f6f 	isb	sy
 8004a50:	f7fe ffba 	bl	80039c8 <vTaskSwitchContext>
 8004a54:	f04f 0000 	mov.w	r0, #0
 8004a58:	f380 8811 	msr	BASEPRI, r0
 8004a5c:	bc09      	pop	{r0, r3}
 8004a5e:	6819      	ldr	r1, [r3, #0]
 8004a60:	6808      	ldr	r0, [r1, #0]
 8004a62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a66:	f01e 0f10 	tst.w	lr, #16
 8004a6a:	bf08      	it	eq
 8004a6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004a70:	f380 8809 	msr	PSP, r0
 8004a74:	f3bf 8f6f 	isb	sy
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	f3af 8000 	nop.w

08004a80 <pxCurrentTCBConst>:
 8004a80:	20000814 	.word	0x20000814
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004a84:	bf00      	nop
 8004a86:	bf00      	nop

08004a88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
	__asm volatile
 8004a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a92:	f383 8811 	msr	BASEPRI, r3
 8004a96:	f3bf 8f6f 	isb	sy
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	607b      	str	r3, [r7, #4]
}
 8004aa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004aa2:	f7fe fed7 	bl	8003854 <xTaskIncrementTick>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d003      	beq.n	8004ab4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004aac:	4b06      	ldr	r3, [pc, #24]	; (8004ac8 <xPortSysTickHandler+0x40>)
 8004aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	f383 8811 	msr	BASEPRI, r3
}
 8004abe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ac0:	bf00      	nop
 8004ac2:	3708      	adds	r7, #8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	e000ed04 	.word	0xe000ed04

08004acc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004acc:	b480      	push	{r7}
 8004ace:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ad0:	4b0b      	ldr	r3, [pc, #44]	; (8004b00 <vPortSetupTimerInterrupt+0x34>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ad6:	4b0b      	ldr	r3, [pc, #44]	; (8004b04 <vPortSetupTimerInterrupt+0x38>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004adc:	4b0a      	ldr	r3, [pc, #40]	; (8004b08 <vPortSetupTimerInterrupt+0x3c>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a0a      	ldr	r2, [pc, #40]	; (8004b0c <vPortSetupTimerInterrupt+0x40>)
 8004ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae6:	099b      	lsrs	r3, r3, #6
 8004ae8:	4a09      	ldr	r2, [pc, #36]	; (8004b10 <vPortSetupTimerInterrupt+0x44>)
 8004aea:	3b01      	subs	r3, #1
 8004aec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004aee:	4b04      	ldr	r3, [pc, #16]	; (8004b00 <vPortSetupTimerInterrupt+0x34>)
 8004af0:	2207      	movs	r2, #7
 8004af2:	601a      	str	r2, [r3, #0]
}
 8004af4:	bf00      	nop
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	e000e010 	.word	0xe000e010
 8004b04:	e000e018 	.word	0xe000e018
 8004b08:	20000004 	.word	0x20000004
 8004b0c:	10624dd3 	.word	0x10624dd3
 8004b10:	e000e014 	.word	0xe000e014

08004b14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004b14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004b24 <vPortEnableVFP+0x10>
 8004b18:	6801      	ldr	r1, [r0, #0]
 8004b1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004b1e:	6001      	str	r1, [r0, #0]
 8004b20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004b22:	bf00      	nop
 8004b24:	e000ed88 	.word	0xe000ed88

08004b28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004b2e:	f3ef 8305 	mrs	r3, IPSR
 8004b32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2b0f      	cmp	r3, #15
 8004b38:	d914      	bls.n	8004b64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004b3a:	4a17      	ldr	r2, [pc, #92]	; (8004b98 <vPortValidateInterruptPriority+0x70>)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4413      	add	r3, r2
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004b44:	4b15      	ldr	r3, [pc, #84]	; (8004b9c <vPortValidateInterruptPriority+0x74>)
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	7afa      	ldrb	r2, [r7, #11]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d20a      	bcs.n	8004b64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b52:	f383 8811 	msr	BASEPRI, r3
 8004b56:	f3bf 8f6f 	isb	sy
 8004b5a:	f3bf 8f4f 	dsb	sy
 8004b5e:	607b      	str	r3, [r7, #4]
}
 8004b60:	bf00      	nop
 8004b62:	e7fe      	b.n	8004b62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004b64:	4b0e      	ldr	r3, [pc, #56]	; (8004ba0 <vPortValidateInterruptPriority+0x78>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b6c:	4b0d      	ldr	r3, [pc, #52]	; (8004ba4 <vPortValidateInterruptPriority+0x7c>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d90a      	bls.n	8004b8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b78:	f383 8811 	msr	BASEPRI, r3
 8004b7c:	f3bf 8f6f 	isb	sy
 8004b80:	f3bf 8f4f 	dsb	sy
 8004b84:	603b      	str	r3, [r7, #0]
}
 8004b86:	bf00      	nop
 8004b88:	e7fe      	b.n	8004b88 <vPortValidateInterruptPriority+0x60>
	}
 8004b8a:	bf00      	nop
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	e000e3f0 	.word	0xe000e3f0
 8004b9c:	20000e40 	.word	0x20000e40
 8004ba0:	e000ed0c 	.word	0xe000ed0c
 8004ba4:	20000e44 	.word	0x20000e44

08004ba8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b08a      	sub	sp, #40	; 0x28
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004bb4:	f7fe fd92 	bl	80036dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004bb8:	4b5b      	ldr	r3, [pc, #364]	; (8004d28 <pvPortMalloc+0x180>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004bc0:	f000 f920 	bl	8004e04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004bc4:	4b59      	ldr	r3, [pc, #356]	; (8004d2c <pvPortMalloc+0x184>)
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4013      	ands	r3, r2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f040 8093 	bne.w	8004cf8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d01d      	beq.n	8004c14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004bd8:	2208      	movs	r2, #8
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4413      	add	r3, r2
 8004bde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f003 0307 	and.w	r3, r3, #7
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d014      	beq.n	8004c14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f023 0307 	bic.w	r3, r3, #7
 8004bf0:	3308      	adds	r3, #8
 8004bf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f003 0307 	and.w	r3, r3, #7
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00a      	beq.n	8004c14 <pvPortMalloc+0x6c>
	__asm volatile
 8004bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c02:	f383 8811 	msr	BASEPRI, r3
 8004c06:	f3bf 8f6f 	isb	sy
 8004c0a:	f3bf 8f4f 	dsb	sy
 8004c0e:	617b      	str	r3, [r7, #20]
}
 8004c10:	bf00      	nop
 8004c12:	e7fe      	b.n	8004c12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d06e      	beq.n	8004cf8 <pvPortMalloc+0x150>
 8004c1a:	4b45      	ldr	r3, [pc, #276]	; (8004d30 <pvPortMalloc+0x188>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d869      	bhi.n	8004cf8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004c24:	4b43      	ldr	r3, [pc, #268]	; (8004d34 <pvPortMalloc+0x18c>)
 8004c26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004c28:	4b42      	ldr	r3, [pc, #264]	; (8004d34 <pvPortMalloc+0x18c>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c2e:	e004      	b.n	8004c3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d903      	bls.n	8004c4c <pvPortMalloc+0xa4>
 8004c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1f1      	bne.n	8004c30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004c4c:	4b36      	ldr	r3, [pc, #216]	; (8004d28 <pvPortMalloc+0x180>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d050      	beq.n	8004cf8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004c56:	6a3b      	ldr	r3, [r7, #32]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2208      	movs	r2, #8
 8004c5c:	4413      	add	r3, r2
 8004c5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	6a3b      	ldr	r3, [r7, #32]
 8004c66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	1ad2      	subs	r2, r2, r3
 8004c70:	2308      	movs	r3, #8
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d91f      	bls.n	8004cb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	f003 0307 	and.w	r3, r3, #7
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00a      	beq.n	8004ca0 <pvPortMalloc+0xf8>
	__asm volatile
 8004c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8e:	f383 8811 	msr	BASEPRI, r3
 8004c92:	f3bf 8f6f 	isb	sy
 8004c96:	f3bf 8f4f 	dsb	sy
 8004c9a:	613b      	str	r3, [r7, #16]
}
 8004c9c:	bf00      	nop
 8004c9e:	e7fe      	b.n	8004c9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	1ad2      	subs	r2, r2, r3
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004cb2:	69b8      	ldr	r0, [r7, #24]
 8004cb4:	f000 f908 	bl	8004ec8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004cb8:	4b1d      	ldr	r3, [pc, #116]	; (8004d30 <pvPortMalloc+0x188>)
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	4a1b      	ldr	r2, [pc, #108]	; (8004d30 <pvPortMalloc+0x188>)
 8004cc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004cc6:	4b1a      	ldr	r3, [pc, #104]	; (8004d30 <pvPortMalloc+0x188>)
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	4b1b      	ldr	r3, [pc, #108]	; (8004d38 <pvPortMalloc+0x190>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d203      	bcs.n	8004cda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004cd2:	4b17      	ldr	r3, [pc, #92]	; (8004d30 <pvPortMalloc+0x188>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a18      	ldr	r2, [pc, #96]	; (8004d38 <pvPortMalloc+0x190>)
 8004cd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	685a      	ldr	r2, [r3, #4]
 8004cde:	4b13      	ldr	r3, [pc, #76]	; (8004d2c <pvPortMalloc+0x184>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cea:	2200      	movs	r2, #0
 8004cec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004cee:	4b13      	ldr	r3, [pc, #76]	; (8004d3c <pvPortMalloc+0x194>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	4a11      	ldr	r2, [pc, #68]	; (8004d3c <pvPortMalloc+0x194>)
 8004cf6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004cf8:	f7fe fcfe 	bl	80036f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	f003 0307 	and.w	r3, r3, #7
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00a      	beq.n	8004d1c <pvPortMalloc+0x174>
	__asm volatile
 8004d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0a:	f383 8811 	msr	BASEPRI, r3
 8004d0e:	f3bf 8f6f 	isb	sy
 8004d12:	f3bf 8f4f 	dsb	sy
 8004d16:	60fb      	str	r3, [r7, #12]
}
 8004d18:	bf00      	nop
 8004d1a:	e7fe      	b.n	8004d1a <pvPortMalloc+0x172>
	return pvReturn;
 8004d1c:	69fb      	ldr	r3, [r7, #28]
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3728      	adds	r7, #40	; 0x28
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	20004a50 	.word	0x20004a50
 8004d2c:	20004a64 	.word	0x20004a64
 8004d30:	20004a54 	.word	0x20004a54
 8004d34:	20004a48 	.word	0x20004a48
 8004d38:	20004a58 	.word	0x20004a58
 8004d3c:	20004a5c 	.word	0x20004a5c

08004d40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d04d      	beq.n	8004dee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004d52:	2308      	movs	r3, #8
 8004d54:	425b      	negs	r3, r3
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	4413      	add	r3, r2
 8004d5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	4b24      	ldr	r3, [pc, #144]	; (8004df8 <vPortFree+0xb8>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4013      	ands	r3, r2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10a      	bne.n	8004d84 <vPortFree+0x44>
	__asm volatile
 8004d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d72:	f383 8811 	msr	BASEPRI, r3
 8004d76:	f3bf 8f6f 	isb	sy
 8004d7a:	f3bf 8f4f 	dsb	sy
 8004d7e:	60fb      	str	r3, [r7, #12]
}
 8004d80:	bf00      	nop
 8004d82:	e7fe      	b.n	8004d82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00a      	beq.n	8004da2 <vPortFree+0x62>
	__asm volatile
 8004d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d90:	f383 8811 	msr	BASEPRI, r3
 8004d94:	f3bf 8f6f 	isb	sy
 8004d98:	f3bf 8f4f 	dsb	sy
 8004d9c:	60bb      	str	r3, [r7, #8]
}
 8004d9e:	bf00      	nop
 8004da0:	e7fe      	b.n	8004da0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	685a      	ldr	r2, [r3, #4]
 8004da6:	4b14      	ldr	r3, [pc, #80]	; (8004df8 <vPortFree+0xb8>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4013      	ands	r3, r2
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d01e      	beq.n	8004dee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d11a      	bne.n	8004dee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	685a      	ldr	r2, [r3, #4]
 8004dbc:	4b0e      	ldr	r3, [pc, #56]	; (8004df8 <vPortFree+0xb8>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	43db      	mvns	r3, r3
 8004dc2:	401a      	ands	r2, r3
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004dc8:	f7fe fc88 	bl	80036dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	685a      	ldr	r2, [r3, #4]
 8004dd0:	4b0a      	ldr	r3, [pc, #40]	; (8004dfc <vPortFree+0xbc>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	4a09      	ldr	r2, [pc, #36]	; (8004dfc <vPortFree+0xbc>)
 8004dd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004dda:	6938      	ldr	r0, [r7, #16]
 8004ddc:	f000 f874 	bl	8004ec8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004de0:	4b07      	ldr	r3, [pc, #28]	; (8004e00 <vPortFree+0xc0>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	3301      	adds	r3, #1
 8004de6:	4a06      	ldr	r2, [pc, #24]	; (8004e00 <vPortFree+0xc0>)
 8004de8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004dea:	f7fe fc85 	bl	80036f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004dee:	bf00      	nop
 8004df0:	3718      	adds	r7, #24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	20004a64 	.word	0x20004a64
 8004dfc:	20004a54 	.word	0x20004a54
 8004e00:	20004a60 	.word	0x20004a60

08004e04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004e0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004e10:	4b27      	ldr	r3, [pc, #156]	; (8004eb0 <prvHeapInit+0xac>)
 8004e12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f003 0307 	and.w	r3, r3, #7
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00c      	beq.n	8004e38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	3307      	adds	r3, #7
 8004e22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f023 0307 	bic.w	r3, r3, #7
 8004e2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	4a1f      	ldr	r2, [pc, #124]	; (8004eb0 <prvHeapInit+0xac>)
 8004e34:	4413      	add	r3, r2
 8004e36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e3c:	4a1d      	ldr	r2, [pc, #116]	; (8004eb4 <prvHeapInit+0xb0>)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004e42:	4b1c      	ldr	r3, [pc, #112]	; (8004eb4 <prvHeapInit+0xb0>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004e50:	2208      	movs	r2, #8
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	1a9b      	subs	r3, r3, r2
 8004e56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f023 0307 	bic.w	r3, r3, #7
 8004e5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	4a15      	ldr	r2, [pc, #84]	; (8004eb8 <prvHeapInit+0xb4>)
 8004e64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004e66:	4b14      	ldr	r3, [pc, #80]	; (8004eb8 <prvHeapInit+0xb4>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004e6e:	4b12      	ldr	r3, [pc, #72]	; (8004eb8 <prvHeapInit+0xb4>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2200      	movs	r2, #0
 8004e74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	1ad2      	subs	r2, r2, r3
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004e84:	4b0c      	ldr	r3, [pc, #48]	; (8004eb8 <prvHeapInit+0xb4>)
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	4a0a      	ldr	r2, [pc, #40]	; (8004ebc <prvHeapInit+0xb8>)
 8004e92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	4a09      	ldr	r2, [pc, #36]	; (8004ec0 <prvHeapInit+0xbc>)
 8004e9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004e9c:	4b09      	ldr	r3, [pc, #36]	; (8004ec4 <prvHeapInit+0xc0>)
 8004e9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004ea2:	601a      	str	r2, [r3, #0]
}
 8004ea4:	bf00      	nop
 8004ea6:	3714      	adds	r7, #20
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	20000e48 	.word	0x20000e48
 8004eb4:	20004a48 	.word	0x20004a48
 8004eb8:	20004a50 	.word	0x20004a50
 8004ebc:	20004a58 	.word	0x20004a58
 8004ec0:	20004a54 	.word	0x20004a54
 8004ec4:	20004a64 	.word	0x20004a64

08004ec8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ed0:	4b28      	ldr	r3, [pc, #160]	; (8004f74 <prvInsertBlockIntoFreeList+0xac>)
 8004ed2:	60fb      	str	r3, [r7, #12]
 8004ed4:	e002      	b.n	8004edc <prvInsertBlockIntoFreeList+0x14>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	60fb      	str	r3, [r7, #12]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d8f7      	bhi.n	8004ed6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	68ba      	ldr	r2, [r7, #8]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d108      	bne.n	8004f0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	685a      	ldr	r2, [r3, #4]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	441a      	add	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	441a      	add	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d118      	bne.n	8004f50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	4b15      	ldr	r3, [pc, #84]	; (8004f78 <prvInsertBlockIntoFreeList+0xb0>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d00d      	beq.n	8004f46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685a      	ldr	r2, [r3, #4]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	441a      	add	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	e008      	b.n	8004f58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004f46:	4b0c      	ldr	r3, [pc, #48]	; (8004f78 <prvInsertBlockIntoFreeList+0xb0>)
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	601a      	str	r2, [r3, #0]
 8004f4e:	e003      	b.n	8004f58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d002      	beq.n	8004f66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f66:	bf00      	nop
 8004f68:	3714      	adds	r7, #20
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	20004a48 	.word	0x20004a48
 8004f78:	20004a50 	.word	0x20004a50

08004f7c <__libc_init_array>:
 8004f7c:	b570      	push	{r4, r5, r6, lr}
 8004f7e:	4d0d      	ldr	r5, [pc, #52]	; (8004fb4 <__libc_init_array+0x38>)
 8004f80:	4c0d      	ldr	r4, [pc, #52]	; (8004fb8 <__libc_init_array+0x3c>)
 8004f82:	1b64      	subs	r4, r4, r5
 8004f84:	10a4      	asrs	r4, r4, #2
 8004f86:	2600      	movs	r6, #0
 8004f88:	42a6      	cmp	r6, r4
 8004f8a:	d109      	bne.n	8004fa0 <__libc_init_array+0x24>
 8004f8c:	4d0b      	ldr	r5, [pc, #44]	; (8004fbc <__libc_init_array+0x40>)
 8004f8e:	4c0c      	ldr	r4, [pc, #48]	; (8004fc0 <__libc_init_array+0x44>)
 8004f90:	f000 f8f6 	bl	8005180 <_init>
 8004f94:	1b64      	subs	r4, r4, r5
 8004f96:	10a4      	asrs	r4, r4, #2
 8004f98:	2600      	movs	r6, #0
 8004f9a:	42a6      	cmp	r6, r4
 8004f9c:	d105      	bne.n	8004faa <__libc_init_array+0x2e>
 8004f9e:	bd70      	pop	{r4, r5, r6, pc}
 8004fa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fa4:	4798      	blx	r3
 8004fa6:	3601      	adds	r6, #1
 8004fa8:	e7ee      	b.n	8004f88 <__libc_init_array+0xc>
 8004faa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fae:	4798      	blx	r3
 8004fb0:	3601      	adds	r6, #1
 8004fb2:	e7f2      	b.n	8004f9a <__libc_init_array+0x1e>
 8004fb4:	080052c0 	.word	0x080052c0
 8004fb8:	080052c0 	.word	0x080052c0
 8004fbc:	080052c0 	.word	0x080052c0
 8004fc0:	080052c4 	.word	0x080052c4

08004fc4 <__retarget_lock_acquire_recursive>:
 8004fc4:	4770      	bx	lr

08004fc6 <__retarget_lock_release_recursive>:
 8004fc6:	4770      	bx	lr

08004fc8 <memcpy>:
 8004fc8:	440a      	add	r2, r1
 8004fca:	4291      	cmp	r1, r2
 8004fcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004fd0:	d100      	bne.n	8004fd4 <memcpy+0xc>
 8004fd2:	4770      	bx	lr
 8004fd4:	b510      	push	{r4, lr}
 8004fd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fde:	4291      	cmp	r1, r2
 8004fe0:	d1f9      	bne.n	8004fd6 <memcpy+0xe>
 8004fe2:	bd10      	pop	{r4, pc}

08004fe4 <memset>:
 8004fe4:	4402      	add	r2, r0
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d100      	bne.n	8004fee <memset+0xa>
 8004fec:	4770      	bx	lr
 8004fee:	f803 1b01 	strb.w	r1, [r3], #1
 8004ff2:	e7f9      	b.n	8004fe8 <memset+0x4>

08004ff4 <cleanup_glue>:
 8004ff4:	b538      	push	{r3, r4, r5, lr}
 8004ff6:	460c      	mov	r4, r1
 8004ff8:	6809      	ldr	r1, [r1, #0]
 8004ffa:	4605      	mov	r5, r0
 8004ffc:	b109      	cbz	r1, 8005002 <cleanup_glue+0xe>
 8004ffe:	f7ff fff9 	bl	8004ff4 <cleanup_glue>
 8005002:	4621      	mov	r1, r4
 8005004:	4628      	mov	r0, r5
 8005006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800500a:	f000 b869 	b.w	80050e0 <_free_r>
	...

08005010 <_reclaim_reent>:
 8005010:	4b2c      	ldr	r3, [pc, #176]	; (80050c4 <_reclaim_reent+0xb4>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4283      	cmp	r3, r0
 8005016:	b570      	push	{r4, r5, r6, lr}
 8005018:	4604      	mov	r4, r0
 800501a:	d051      	beq.n	80050c0 <_reclaim_reent+0xb0>
 800501c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800501e:	b143      	cbz	r3, 8005032 <_reclaim_reent+0x22>
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d14a      	bne.n	80050bc <_reclaim_reent+0xac>
 8005026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005028:	6819      	ldr	r1, [r3, #0]
 800502a:	b111      	cbz	r1, 8005032 <_reclaim_reent+0x22>
 800502c:	4620      	mov	r0, r4
 800502e:	f000 f857 	bl	80050e0 <_free_r>
 8005032:	6961      	ldr	r1, [r4, #20]
 8005034:	b111      	cbz	r1, 800503c <_reclaim_reent+0x2c>
 8005036:	4620      	mov	r0, r4
 8005038:	f000 f852 	bl	80050e0 <_free_r>
 800503c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800503e:	b111      	cbz	r1, 8005046 <_reclaim_reent+0x36>
 8005040:	4620      	mov	r0, r4
 8005042:	f000 f84d 	bl	80050e0 <_free_r>
 8005046:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005048:	b111      	cbz	r1, 8005050 <_reclaim_reent+0x40>
 800504a:	4620      	mov	r0, r4
 800504c:	f000 f848 	bl	80050e0 <_free_r>
 8005050:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005052:	b111      	cbz	r1, 800505a <_reclaim_reent+0x4a>
 8005054:	4620      	mov	r0, r4
 8005056:	f000 f843 	bl	80050e0 <_free_r>
 800505a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800505c:	b111      	cbz	r1, 8005064 <_reclaim_reent+0x54>
 800505e:	4620      	mov	r0, r4
 8005060:	f000 f83e 	bl	80050e0 <_free_r>
 8005064:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005066:	b111      	cbz	r1, 800506e <_reclaim_reent+0x5e>
 8005068:	4620      	mov	r0, r4
 800506a:	f000 f839 	bl	80050e0 <_free_r>
 800506e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005070:	b111      	cbz	r1, 8005078 <_reclaim_reent+0x68>
 8005072:	4620      	mov	r0, r4
 8005074:	f000 f834 	bl	80050e0 <_free_r>
 8005078:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800507a:	b111      	cbz	r1, 8005082 <_reclaim_reent+0x72>
 800507c:	4620      	mov	r0, r4
 800507e:	f000 f82f 	bl	80050e0 <_free_r>
 8005082:	69a3      	ldr	r3, [r4, #24]
 8005084:	b1e3      	cbz	r3, 80050c0 <_reclaim_reent+0xb0>
 8005086:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005088:	4620      	mov	r0, r4
 800508a:	4798      	blx	r3
 800508c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800508e:	b1b9      	cbz	r1, 80050c0 <_reclaim_reent+0xb0>
 8005090:	4620      	mov	r0, r4
 8005092:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005096:	f7ff bfad 	b.w	8004ff4 <cleanup_glue>
 800509a:	5949      	ldr	r1, [r1, r5]
 800509c:	b941      	cbnz	r1, 80050b0 <_reclaim_reent+0xa0>
 800509e:	3504      	adds	r5, #4
 80050a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050a2:	2d80      	cmp	r5, #128	; 0x80
 80050a4:	68d9      	ldr	r1, [r3, #12]
 80050a6:	d1f8      	bne.n	800509a <_reclaim_reent+0x8a>
 80050a8:	4620      	mov	r0, r4
 80050aa:	f000 f819 	bl	80050e0 <_free_r>
 80050ae:	e7ba      	b.n	8005026 <_reclaim_reent+0x16>
 80050b0:	680e      	ldr	r6, [r1, #0]
 80050b2:	4620      	mov	r0, r4
 80050b4:	f000 f814 	bl	80050e0 <_free_r>
 80050b8:	4631      	mov	r1, r6
 80050ba:	e7ef      	b.n	800509c <_reclaim_reent+0x8c>
 80050bc:	2500      	movs	r5, #0
 80050be:	e7ef      	b.n	80050a0 <_reclaim_reent+0x90>
 80050c0:	bd70      	pop	{r4, r5, r6, pc}
 80050c2:	bf00      	nop
 80050c4:	20000014 	.word	0x20000014

080050c8 <__malloc_lock>:
 80050c8:	4801      	ldr	r0, [pc, #4]	; (80050d0 <__malloc_lock+0x8>)
 80050ca:	f7ff bf7b 	b.w	8004fc4 <__retarget_lock_acquire_recursive>
 80050ce:	bf00      	nop
 80050d0:	20004b4c 	.word	0x20004b4c

080050d4 <__malloc_unlock>:
 80050d4:	4801      	ldr	r0, [pc, #4]	; (80050dc <__malloc_unlock+0x8>)
 80050d6:	f7ff bf76 	b.w	8004fc6 <__retarget_lock_release_recursive>
 80050da:	bf00      	nop
 80050dc:	20004b4c 	.word	0x20004b4c

080050e0 <_free_r>:
 80050e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050e2:	2900      	cmp	r1, #0
 80050e4:	d048      	beq.n	8005178 <_free_r+0x98>
 80050e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050ea:	9001      	str	r0, [sp, #4]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f1a1 0404 	sub.w	r4, r1, #4
 80050f2:	bfb8      	it	lt
 80050f4:	18e4      	addlt	r4, r4, r3
 80050f6:	f7ff ffe7 	bl	80050c8 <__malloc_lock>
 80050fa:	4a20      	ldr	r2, [pc, #128]	; (800517c <_free_r+0x9c>)
 80050fc:	9801      	ldr	r0, [sp, #4]
 80050fe:	6813      	ldr	r3, [r2, #0]
 8005100:	4615      	mov	r5, r2
 8005102:	b933      	cbnz	r3, 8005112 <_free_r+0x32>
 8005104:	6063      	str	r3, [r4, #4]
 8005106:	6014      	str	r4, [r2, #0]
 8005108:	b003      	add	sp, #12
 800510a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800510e:	f7ff bfe1 	b.w	80050d4 <__malloc_unlock>
 8005112:	42a3      	cmp	r3, r4
 8005114:	d90b      	bls.n	800512e <_free_r+0x4e>
 8005116:	6821      	ldr	r1, [r4, #0]
 8005118:	1862      	adds	r2, r4, r1
 800511a:	4293      	cmp	r3, r2
 800511c:	bf04      	itt	eq
 800511e:	681a      	ldreq	r2, [r3, #0]
 8005120:	685b      	ldreq	r3, [r3, #4]
 8005122:	6063      	str	r3, [r4, #4]
 8005124:	bf04      	itt	eq
 8005126:	1852      	addeq	r2, r2, r1
 8005128:	6022      	streq	r2, [r4, #0]
 800512a:	602c      	str	r4, [r5, #0]
 800512c:	e7ec      	b.n	8005108 <_free_r+0x28>
 800512e:	461a      	mov	r2, r3
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	b10b      	cbz	r3, 8005138 <_free_r+0x58>
 8005134:	42a3      	cmp	r3, r4
 8005136:	d9fa      	bls.n	800512e <_free_r+0x4e>
 8005138:	6811      	ldr	r1, [r2, #0]
 800513a:	1855      	adds	r5, r2, r1
 800513c:	42a5      	cmp	r5, r4
 800513e:	d10b      	bne.n	8005158 <_free_r+0x78>
 8005140:	6824      	ldr	r4, [r4, #0]
 8005142:	4421      	add	r1, r4
 8005144:	1854      	adds	r4, r2, r1
 8005146:	42a3      	cmp	r3, r4
 8005148:	6011      	str	r1, [r2, #0]
 800514a:	d1dd      	bne.n	8005108 <_free_r+0x28>
 800514c:	681c      	ldr	r4, [r3, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	6053      	str	r3, [r2, #4]
 8005152:	4421      	add	r1, r4
 8005154:	6011      	str	r1, [r2, #0]
 8005156:	e7d7      	b.n	8005108 <_free_r+0x28>
 8005158:	d902      	bls.n	8005160 <_free_r+0x80>
 800515a:	230c      	movs	r3, #12
 800515c:	6003      	str	r3, [r0, #0]
 800515e:	e7d3      	b.n	8005108 <_free_r+0x28>
 8005160:	6825      	ldr	r5, [r4, #0]
 8005162:	1961      	adds	r1, r4, r5
 8005164:	428b      	cmp	r3, r1
 8005166:	bf04      	itt	eq
 8005168:	6819      	ldreq	r1, [r3, #0]
 800516a:	685b      	ldreq	r3, [r3, #4]
 800516c:	6063      	str	r3, [r4, #4]
 800516e:	bf04      	itt	eq
 8005170:	1949      	addeq	r1, r1, r5
 8005172:	6021      	streq	r1, [r4, #0]
 8005174:	6054      	str	r4, [r2, #4]
 8005176:	e7c7      	b.n	8005108 <_free_r+0x28>
 8005178:	b003      	add	sp, #12
 800517a:	bd30      	pop	{r4, r5, pc}
 800517c:	20004a68 	.word	0x20004a68

08005180 <_init>:
 8005180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005182:	bf00      	nop
 8005184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005186:	bc08      	pop	{r3}
 8005188:	469e      	mov	lr, r3
 800518a:	4770      	bx	lr

0800518c <_fini>:
 800518c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800518e:	bf00      	nop
 8005190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005192:	bc08      	pop	{r3}
 8005194:	469e      	mov	lr, r3
 8005196:	4770      	bx	lr
